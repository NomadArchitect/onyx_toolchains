diff -Naur llvm-project-13.0.0/clang/cmake/caches/Onyx.cmake llvm-project-13.0.0-patched/clang/cmake/caches/Onyx.cmake
--- llvm-project-13.0.0/clang/cmake/caches/Onyx.cmake	1970-01-01 01:00:00.000000000 +0100
+++ llvm-project-13.0.0-patched/clang/cmake/caches/Onyx.cmake	2022-02-03 15:24:18.478478979 +0000
@@ -0,0 +1,151 @@
+# This file sets up a CMakeCache for a Onyx toolchain build.
+
+set(LLVM_TARGETS_TO_BUILD X86 CACHE STRING "")
+
+set(PACKAGE_VENDOR Onyx CACHE STRING "")
+
+set(LLVM_ENABLE_PROJECTS "clang;clang-tools-extra;lld;llvm" CACHE STRING "")
+
+set(LLVM_ENABLE_BACKTRACES OFF CACHE BOOL "")
+set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ON CACHE BOOL "")
+set(LLVM_ENABLE_TERMINFO OFF CACHE BOOL "")
+set(LLVM_ENABLE_UNWIND_TABLES OFF CACHE BOOL "")
+set(LLVM_ENABLE_ZLIB OFF CACHE BOOL "")
+set(LLVM_INCLUDE_DOCS OFF CACHE BOOL "")
+set(LLVM_INCLUDE_EXAMPLES OFF CACHE BOOL "")
+set(LLVM_INCLUDE_GO_TESTS OFF CACHE BOOL "")
+
+if(MSVC)
+  set(LLVM_USE_CRT_RELEASE "MT" CACHE STRING "")
+endif()
+
+set(CLANG_DEFAULT_CXX_STDLIB libc++ CACHE STRING "")
+if(NOT APPLE)
+  set(CLANG_DEFAULT_LINKER lld CACHE STRING "")
+  set(CLANG_DEFAULT_OBJCOPY llvm-objcopy CACHE STRING "")
+endif()
+set(CLANG_DEFAULT_RTLIB compiler-rt CACHE STRING "")
+set(CLANG_ENABLE_ARCMT OFF CACHE BOOL "")
+set(CLANG_ENABLE_STATIC_ANALYZER ON CACHE BOOL "")
+set(CLANG_PLUGIN_SUPPORT OFF CACHE BOOL "")
+
+set(ENABLE_EXPERIMENTAL_NEW_PASS_MANAGER ON CACHE BOOL "")
+set(ENABLE_LINKER_BUILD_ID ON CACHE BOOL "")
+set(ENABLE_X86_RELAX_RELOCATIONS ON CACHE BOOL "")
+
+set(LLVM_ENABLE_ASSERTIONS ON CACHE BOOL "")
+set(CMAKE_BUILD_TYPE Release CACHE STRING "")
+if(APPLE)
+  set(MACOSX_DEPLOYMENT_TARGET 10.7 CACHE STRING "")
+elseif(MSVC)
+  set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded" CACHE STRING "")
+endif()
+
+if(APPLE)
+  set(COMPILER_RT_ENABLE_IOS OFF CACHE BOOL "")
+  set(COMPILER_RT_ENABLE_TVOS OFF CACHE BOOL "")
+  set(COMPILER_RT_ENABLE_WATCHOS OFF CACHE BOOL "")
+endif()
+
+set(LIBUNWIND_ENABLE_SHARED OFF CACHE BOOL "")
+set(LIBUNWIND_INSTALL_LIBRARY OFF CACHE BOOL "")
+set(LIBUNWIND_USE_COMPILER_RT ON CACHE BOOL "")
+set(LIBCXXABI_ENABLE_SHARED OFF CACHE BOOL "")
+set(LIBCXXABI_ENABLE_STATIC_UNWINDER ON CACHE BOOL "")
+set(LIBCXXABI_INSTALL_LIBRARY OFF CACHE BOOL "")
+set(LIBCXXABI_USE_COMPILER_RT ON CACHE BOOL "")
+set(LIBCXXABI_USE_LLVM_UNWINDER ON CACHE BOOL "")
+set(LIBCXX_ABI_VERSION 2 CACHE STRING "")
+set(LIBCXX_ENABLE_SHARED OFF CACHE BOOL "")
+if(WIN32)
+  set(LIBCXX_HAS_WIN32_THREAD_API ON CACHE BOOL "")
+  set(LIBCXX_ENABLE_EXPERIMENTAL_LIBRARY OFF CACHE BOOL "")
+  set(LIBCXX_ENABLE_FILESYSTEM OFF CACHE BOOL "")
+  set(LIBCXX_ENABLE_ABI_LINKER_SCRIPT OFF CACHE BOOL "")
+  set(LIBCXX_ENABLE_STATIC_ABI_LIBRARY OFF CACHE BOOL "")
+  set(BUILTINS_CMAKE_ARGS -DCMAKE_SYSTEM_NAME=Windows CACHE STRING "")
+  set(RUNTIMES_CMAKE_ARGS -DCMAKE_SYSTEM_NAME=Windows CACHE STRING "")
+  set(LLVM_ENABLE_RUNTIMES "compiler-rt;libcxx" CACHE STRING "")
+else()
+  set(LIBCXX_ENABLE_STATIC_ABI_LIBRARY ON CACHE BOOL "")
+  set(LLVM_ENABLE_RUNTIMES "compiler-rt;libcxx;libcxxabi;libunwind" CACHE STRING "")
+endif()
+
+if(BOOTSTRAP_CMAKE_SYSTEM_NAME)
+  set(target "${BOOTSTRAP_CMAKE_CXX_COMPILER_TARGET}")
+  if(STAGE2_LINUX_${target}_SYSROOT)
+    set(LLVM_BUILTIN_TARGETS "${target}" CACHE STRING "")
+    set(BUILTINS_${target}_CMAKE_SYSTEM_NAME Linux CACHE STRING "")
+    set(BUILTINS_${target}_CMAKE_BUILD_TYPE Release CACHE STRING "")
+    set(BUILTINS_${target}_CMAKE_SYSROOT ${STAGE2_LINUX_${target}_SYSROOT} CACHE STRING "")
+
+    set(LLVM_RUNTIME_TARGETS "${target}" CACHE STRING "")
+    set(RUNTIMES_${target}_CMAKE_SYSTEM_NAME Linux CACHE STRING "")
+    set(RUNTIMES_${target}_CMAKE_BUILD_TYPE Release CACHE STRING "")
+    set(RUNTIMES_${target}_CMAKE_SYSROOT ${STAGE2_LINUX_${target}_SYSROOT} CACHE STRING "")
+    set(RUNTIMES_${target}_COMPILER_RT_USE_BUILTINS_LIBRARY ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LLVM_ENABLE_ASSERTIONS ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBUNWIND_ENABLE_SHARED OFF CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBUNWIND_USE_COMPILER_RT ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBUNWIND_INSTALL_LIBRARY OFF CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXXABI_USE_COMPILER_RT ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXXABI_ENABLE_SHARED OFF CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXXABI_USE_LLVM_UNWINDER ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXXABI_ENABLE_STATIC_UNWINDER ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXXABI_INSTALL_LIBRARY OFF CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXX_USE_COMPILER_RT ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXX_ENABLE_SHARED OFF CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXX_ENABLE_STATIC_ABI_LIBRARY ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXX_ABI_VERSION 2 CACHE STRING "")
+    set(RUNTIMES_${target}_LLVM_ENABLE_RUNTIMES "compiler-rt;libcxx;libcxxabi;libunwind" CACHE STRING "")
+    set(RUNTIMES_${target}_SANITIZER_CXX_ABI "libc++" CACHE STRING "")
+    set(RUNTIMES_${target}_SANITIZER_CXX_ABI_INTREE ON CACHE BOOL "")
+  endif()
+endif()
+
+if(UNIX)
+  set(BOOTSTRAP_CMAKE_SHARED_LINKER_FLAGS "-ldl -lpthread" CACHE STRING "")
+  set(BOOTSTRAP_CMAKE_MODULE_LINKER_FLAGS "-ldl -lpthread" CACHE STRING "")
+  set(BOOTSTRAP_CMAKE_EXE_LINKER_FLAGS "-ldl -lpthread" CACHE STRING "")
+endif()
+
+set(BOOTSTRAP_LLVM_ENABLE_LTO ON CACHE BOOL "")
+if(NOT APPLE)
+  set(BOOTSTRAP_LLVM_ENABLE_LLD ON CACHE BOOL "")
+endif()
+
+set(CLANG_BOOTSTRAP_TARGETS
+  check-all
+  check-llvm
+  check-clang
+  check-lld
+  llvm-config
+  test-suite
+  test-depends
+  llvm-test-depends
+  clang-test-depends
+  lld-test-depends
+  distribution
+  install-distribution
+  install-distribution-stripped
+  install-distribution-toolchain
+  clang CACHE STRING "")
+
+get_cmake_property(variableNames VARIABLES)
+foreach(variableName ${variableNames})
+  if(variableName MATCHES "^STAGE2_")
+    string(REPLACE "STAGE2_" "" new_name ${variableName})
+    list(APPEND EXTRA_ARGS "-D${new_name}=${${variableName}}")
+  endif()
+endforeach()
+
+# Setup the bootstrap build.
+set(CLANG_ENABLE_BOOTSTRAP ON CACHE BOOL "")
+set(CLANG_BOOTSTRAP_EXTRA_DEPS
+  builtins
+  runtimes
+  CACHE STRING "")
+set(CLANG_BOOTSTRAP_CMAKE_ARGS
+  ${EXTRA_ARGS}
+  -C ${CMAKE_CURRENT_LIST_DIR}/Onyx-stage2.cmake
+  CACHE STRING "")
diff -Naur llvm-project-13.0.0/clang/cmake/caches/Onyx-stage2.cmake llvm-project-13.0.0-patched/clang/cmake/caches/Onyx-stage2.cmake
--- llvm-project-13.0.0/clang/cmake/caches/Onyx-stage2.cmake	1970-01-01 01:00:00.000000000 +0100
+++ llvm-project-13.0.0-patched/clang/cmake/caches/Onyx-stage2.cmake	2022-02-03 17:30:25.372715408 +0000
@@ -0,0 +1,274 @@
+# This file sets up a CMakeCache for the second stage of a Onyx toolchain build.
+
+set(LLVM_TARGETS_TO_BUILD X86;RISCV CACHE STRING "")
+
+set(PACKAGE_VENDOR Onyx CACHE STRING "")
+
+set(LLVM_ENABLE_PROJECTS "clang;clang-tools-extra;lld;llvm" CACHE STRING "")
+set(LLVM_ENABLE_RUNTIMES "compiler-rt;libcxx;libcxxabi;libunwind" CACHE STRING "")
+
+set(LLVM_ENABLE_BACKTRACES OFF CACHE BOOL "")
+if(NOT APPLE)
+  set(LLVM_ENABLE_LLD ON CACHE BOOL "")
+endif()
+set(LLVM_ENABLE_LTO ON CACHE BOOL "")
+set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ON CACHE BOOL "")
+set(LLVM_ENABLE_TERMINFO ON CACHE BOOL "")
+set(LLVM_ENABLE_UNWIND_TABLES OFF CACHE BOOL "")
+set(LLVM_ENABLE_ZLIB ON CACHE BOOL "")
+set(LLVM_INCLUDE_DOCS OFF CACHE BOOL "")
+set(LLVM_INCLUDE_EXAMPLES OFF CACHE BOOL "")
+set(LLVM_INCLUDE_GO_TESTS OFF CACHE BOOL "")
+set(LLVM_USE_RELATIVE_PATHS_IN_FILES ON CACHE BOOL "")
+set(LLVM_ENABLE_Z3_SOLVER OFF CACHE BOOL "")
+
+if(MSVC)
+  set(LLVM_USE_CRT_RELEASE "MT" CACHE STRING "")
+endif()
+
+set(CLANG_DEFAULT_CXX_STDLIB libc++ CACHE STRING "")
+if(NOT APPLE)
+  set(CLANG_DEFAULT_LINKER lld CACHE STRING "")
+  set(CLANG_DEFAULT_OBJCOPY llvm-objcopy CACHE STRING "")
+endif()
+set(CLANG_DEFAULT_RTLIB compiler-rt CACHE STRING "")
+set(CLANG_ENABLE_ARCMT OFF CACHE BOOL "")
+set(CLANG_ENABLE_STATIC_ANALYZER ON CACHE BOOL "")
+set(CLANG_PLUGIN_SUPPORT OFF CACHE BOOL "")
+
+set(ENABLE_EXPERIMENTAL_NEW_PASS_MANAGER ON CACHE BOOL "")
+set(ENABLE_LINKER_BUILD_ID ON CACHE BOOL "")
+set(ENABLE_X86_RELAX_RELOCATIONS ON CACHE BOOL "")
+
+set(CMAKE_BUILD_TYPE Release CACHE STRING "")
+if (APPLE)
+  set(MACOSX_DEPLOYMENT_TARGET 10.7 CACHE STRING "")
+elseif(MSVC)
+  set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded" CACHE STRING "")
+endif()
+
+if(APPLE)
+  list(APPEND BUILTIN_TARGETS "default")
+  list(APPEND RUNTIME_TARGETS "default")
+
+  set(COMPILER_RT_ENABLE_TVOS OFF CACHE BOOL "")
+  set(COMPILER_RT_ENABLE_WATCHOS OFF CACHE BOOL "")
+  set(COMPILER_RT_USE_BUILTINS_LIBRARY ON CACHE BOOL "")
+
+  set(LIBUNWIND_ENABLE_SHARED OFF CACHE BOOL "")
+  set(LIBUNWIND_INSTALL_LIBRARY OFF CACHE BOOL "")
+  set(LIBUNWIND_USE_COMPILER_RT ON CACHE BOOL "")
+  set(LIBCXXABI_ENABLE_SHARED OFF CACHE BOOL "")
+  set(LIBCXXABI_ENABLE_STATIC_UNWINDER ON CACHE BOOL "")
+  set(LIBCXXABI_INSTALL_LIBRARY OFF CACHE BOOL "")
+  set(LIBCXXABI_USE_COMPILER_RT ON CACHE BOOL "")
+  set(LIBCXXABI_USE_LLVM_UNWINDER ON CACHE BOOL "")
+  set(LIBCXX_USE_COMPILER_RT ON CACHE BOOL "")
+  set(LIBCXX_ENABLE_SHARED OFF CACHE BOOL "")
+  set(LIBCXX_ENABLE_STATIC_ABI_LIBRARY ON CACHE BOOL "")
+  set(LIBCXX_ABI_VERSION 2 CACHE STRING "")
+  set(DARWIN_ios_ARCHS armv7;armv7s;arm64 CACHE STRING "")
+  set(DARWIN_iossim_ARCHS i386;x86_64 CACHE STRING "")
+  set(DARWIN_osx_ARCHS x86_64 CACHE STRING "")
+  set(SANITIZER_MIN_OSX_VERSION 10.7 CACHE STRING "")
+endif()
+
+if(WIN32)
+  set(target "x86_64-pc-windows-msvc")
+
+  list(APPEND BUILTIN_TARGETS "${target}")
+  set(BUILTINS_${target}_CMAKE_SYSTEM_NAME Windows CACHE STRING "")
+  set(BUILTINS_${target}_CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "")
+
+  list(APPEND RUNTIME_TARGETS "${target}")
+  set(RUNTIMES_${target}_CMAKE_SYSTEM_NAME Windows CACHE STRING "")
+  set(RUNTIMES_${target}_CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "")
+  set(RUNTIMES_${target}_LIBCXX_ABI_VERSION 2 CACHE STRING "")
+  set(RUNTIMES_${target}_LIBCXX_HAS_WIN32_THREAD_API ON CACHE BOOL "")
+  set(RUNTIMES_${target}_LIBCXX_ENABLE_EXPERIMENTAL_LIBRARY OFF CACHE BOOL "")
+  set(RUNTIMES_${target}_LIBCXX_ENABLE_FILESYSTEM OFF CACHE BOOL "")
+  set(RUNTIMES_${target}_LIBCXX_ENABLE_ABI_LINKER_SCRIPT OFF CACHE BOOL "")
+  set(RUNTIMES_${target}_LIBCXX_ENABLE_SHARED OFF CACHE BOOL "")
+  set(RUNTIMES_${target}_LLVM_ENABLE_RUNTIMES "compiler-rt;libcxx" CACHE STRING "")
+endif()
+
+foreach(target aarch64-unknown-linux-gnu;armv7-unknown-linux-gnueabihf;i386-unknown-linux-gnu;x86_64-unknown-linux-gnu)
+  if(LINUX_${target}_SYSROOT)
+    # Set the per-target builtins options.
+    list(APPEND BUILTIN_TARGETS "${target}")
+    set(BUILTINS_${target}_CMAKE_SYSTEM_NAME Linux CACHE STRING "")
+    set(BUILTINS_${target}_CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "")
+    set(BUILTINS_${target}_CMAKE_C_FLAGS "--target=${target}" CACHE STRING "")
+    set(BUILTINS_${target}_CMAKE_CXX_FLAGS "--target=${target}" CACHE STRING "")
+    set(BUILTINS_${target}_CMAKE_ASM_FLAGS "--target=${target}" CACHE STRING "")
+    set(BUILTINS_${target}_CMAKE_SYSROOT ${LINUX_${target}_SYSROOT} CACHE STRING "")
+    set(BUILTINS_${target}_CMAKE_SHARED_LINKER_FLAGS "-fuse-ld=lld" CACHE STRING "")
+    set(BUILTINS_${target}_CMAKE_MODULE_LINKER_FLAGS "-fuse-ld=lld" CACHE STRING "")
+    set(BUILTINS_${target}_CMAKE_EXE_LINKER_FLAG "-fuse-ld=lld" CACHE STRING "")
+
+    # Set the per-target runtimes options.
+    list(APPEND RUNTIME_TARGETS "${target}")
+    set(RUNTIMES_${target}_CMAKE_SYSTEM_NAME Linux CACHE STRING "")
+    set(RUNTIMES_${target}_CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "")
+    set(RUNTIMES_${target}_CMAKE_C_FLAGS "--target=${target}" CACHE STRING "")
+    set(RUNTIMES_${target}_CMAKE_CXX_FLAGS "--target=${target}" CACHE STRING "")
+    set(RUNTIMES_${target}_CMAKE_ASM_FLAGS "--target=${target}" CACHE STRING "")
+    set(RUNTIMES_${target}_CMAKE_SYSROOT ${LINUX_${target}_SYSROOT} CACHE STRING "")
+    set(RUNTIMES_${target}_CMAKE_SHARED_LINKER_FLAGS "-fuse-ld=lld" CACHE STRING "")
+    set(RUNTIMES_${target}_CMAKE_MODULE_LINKER_FLAGS "-fuse-ld=lld" CACHE STRING "")
+    set(RUNTIMES_${target}_CMAKE_EXE_LINKER_FLAGS "-fuse-ld=lld" CACHE STRING "")
+    set(RUNTIMES_${target}_COMPILER_RT_USE_BUILTINS_LIBRARY ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBUNWIND_ENABLE_SHARED OFF CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBUNWIND_USE_COMPILER_RT ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBUNWIND_INSTALL_LIBRARY OFF CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXXABI_USE_COMPILER_RT ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXXABI_ENABLE_SHARED OFF CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXXABI_USE_LLVM_UNWINDER ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXXABI_ENABLE_STATIC_UNWINDER ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXXABI_INSTALL_LIBRARY OFF CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXX_USE_COMPILER_RT ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXX_ENABLE_SHARED OFF CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXX_ENABLE_STATIC_ABI_LIBRARY ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LIBCXX_ABI_VERSION 2 CACHE STRING "")
+    set(RUNTIMES_${target}_LLVM_ENABLE_ASSERTIONS ON CACHE BOOL "")
+    set(RUNTIMES_${target}_SANITIZER_CXX_ABI "libc++" CACHE STRING "")
+    set(RUNTIMES_${target}_SANITIZER_CXX_ABI_INTREE ON CACHE BOOL "")
+    set(RUNTIMES_${target}_LLVM_ENABLE_RUNTIMES "compiler-rt;libcxx;libcxxabi;libunwind" CACHE STRING "")
+
+    # Use .build-id link.
+    list(APPEND RUNTIME_BUILD_ID_LINK "${target}")
+  endif()
+endforeach()
+
+if(ONYX_SRCDIR)
+  set(ONYX_aarch64_NAME arm64)
+  set(ONYX_i386_NAME x64)
+  set(ONYX_x86_64_NAME x64)
+  set(ONYX_riscv64_NAME riscv64)
+  set(ONYX_riscv64_CFLAGS "-mno-relax")
+  foreach(target i386;x86_64;aarch64;riscv64)
+    set(ONYX_${target}_COMPILER_FLAGS "--target=${target}-unknown-onyx ${ONYX_${target}_CFLAGS}")
+    set(ONYX_${target}_SYSROOT "${ONYX_SRCDIR}/sysroots/${target}")
+    set(ONYX_${target}_TOOLCHAIN_DIR "${ONYX_SRCDIR}/toolchains/cmake")
+  endforeach()
+
+  foreach(target i386;x86_64;riscv64)
+    # Set the per-target builtins options.
+    list(APPEND BUILTIN_TARGETS "${target}-unknown-onyx")
+    set(BUILTINS_${target}-unknown-onyx_CMAKE_SYSTEM_NAME Onyx CACHE STRING "")
+    set(BUILTINS_${target}-unknown-onyx_CMAKE_MODULE_PATH ${BUILTINS_${target}-unknown-onyx_CMAKE_MODULE_PATH} "${ONYX_${target}_TOOLCHAIN_DIR}" CACHE STRING "")
+    set(BUILTINS_${target}-unknown-onyx_CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "")
+    set(BUILTINS_${target}-unknown-onyx_CMAKE_ASM_FLAGS ${ONYX_${target}_COMPILER_FLAGS} CACHE STRING "")
+    set(BUILTINS_${target}-unknown-onyx_CMAKE_C_FLAGS ${ONYX_${target}_COMPILER_FLAGS} CACHE STRING "")
+    set(BUILTINS_${target}-unknown-onyx_CMAKE_CXX_FLAGS ${ONYX_${target}_COMPILER_FLAGS} CACHE STRING "")
+    set(BUILTINS_${target}-unknown-onyx_CMAKE_SHARED_LINKER_FLAGS ${ONYX_${target}_LINKER_FLAGS} CACHE STRING "")
+    set(BUILTINS_${target}-unknown-onyx_CMAKE_MODULE_LINKER_FLAGS ${ONYX_${target}_LINKER_FLAGS} CACHE STRING "")
+    set(BUILTINS_${target}-unknown-onyx_CMAKE_EXE_LINKER_FLAGS ${ONYX_${target}_LINKER_FLAGS} CACHE STRING "")
+    set(BUILTINS_${target}-unknown-onyx_CMAKE_SYSROOT ${ONYX_${target}_SYSROOT} CACHE PATH "")
+  endforeach()
+
+  foreach(target x86_64;riscv64)
+    # Set the per-target runtimes options.
+    list(APPEND RUNTIME_TARGETS "${target}-unknown-onyx")
+    set(RUNTIMES_${target}-unknown-onyx_CMAKE_SYSTEM_NAME Onyx CACHE STRING "")
+    set(RUNTIMES_${target}-unknown-onyx_CMAKE_MODULE_PATH ${RUNTIMES_${target}-unknown-onyx_CMAKE_MODULE_PATH} "${ONYX_${target}_TOOLCHAIN_DIR}" CACHE STRING "")
+    set(RUNTIMES_${target}-unknown-onyx_CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "")
+    set(RUNTIMES_${target}-unknown-onyx_CMAKE_BUILD_WITH_INSTALL_RPATH ON CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_CMAKE_ASM_FLAGS ${ONYX_${target}_COMPILER_FLAGS} CACHE STRING "")
+    set(RUNTIMES_${target}-unknown-onyx_CMAKE_C_FLAGS ${ONYX_${target}_COMPILER_FLAGS} CACHE STRING "")
+    set(RUNTIMES_${target}-unknown-onyx_CMAKE_CXX_FLAGS ${ONYX_${target}_COMPILER_FLAGS} CACHE STRING "")
+    set(RUNTIMES_${target}-unknown-onyx_CMAKE_SHARED_LINKER_FLAGS ${ONYX_${target}_LINKER_FLAGS} CACHE STRING "")
+    set(RUNTIMES_${target}-unknown-onyx_CMAKE_MODULE_LINKER_FLAGS ${ONYX_${target}_LINKER_FLAGS} CACHE STRING "")
+    set(RUNTIMES_${target}-unknown-onyx_CMAKE_EXE_LINKER_FLAGS ${ONYX_${target}_LINKER_FLAGS} CACHE STRING "")
+    set(RUNTIMES_${target}-unknown-onyx_CMAKE_SYSROOT ${ONYX_${target}_SYSROOT} CACHE PATH "")
+    set(RUNTIMES_${target}-unknown-onyx_COMPILER_RT_USE_BUILTINS_LIBRARY ON CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_LIBUNWIND_USE_COMPILER_RT ON CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_LIBUNWIND_HERMETIC_STATIC_LIBRARY ON CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_LIBUNWIND_INSTALL_STATIC_LIBRARY OFF CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_LIBCXXABI_USE_COMPILER_RT ON CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_LIBCXXABI_USE_LLVM_UNWINDER ON CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_LIBCXXABI_ENABLE_STATIC_UNWINDER ON CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_LIBCXXABI_HERMETIC_STATIC_LIBRARY ON CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_LIBCXXABI_INSTALL_STATIC_LIBRARY OFF CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY OFF CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_LIBCXX_USE_COMPILER_RT ON CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_LIBCXX_ENABLE_STATIC_ABI_LIBRARY ON CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_LIBCXX_HERMETIC_STATIC_LIBRARY ON CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_LIBCXX_STATICALLY_LINK_ABI_IN_SHARED_LIBRARY OFF CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_LIBCXX_ABI_VERSION 2 CACHE STRING "")
+    set(RUNTIMES_${target}-unknown-onyx_LLVM_ENABLE_ASSERTIONS ON CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx_LLVM_ENABLE_RUNTIMES "compiler-rt;libcxx;libcxxabi;libunwind" CACHE STRING "")
+
+    set(RUNTIMES_${target}-unknown-onyx+asan_LLVM_BUILD_COMPILER_RT OFF CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx+asan_LLVM_USE_SANITIZER "Address" CACHE STRING "")
+    set(RUNTIMES_${target}-unknown-onyx+asan_LIBCXXABI_ENABLE_NEW_DELETE_DEFINITIONS OFF CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx+asan_LIBCXX_ENABLE_NEW_DELETE_DEFINITIONS OFF CACHE BOOL "")
+
+    set(RUNTIMES_${target}-unknown-onyx+noexcept_LLVM_BUILD_COMPILER_RT OFF CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx+noexcept_LIBCXXABI_ENABLE_EXCEPTIONS OFF CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx+noexcept_LIBCXX_ENABLE_EXCEPTIONS OFF CACHE BOOL "")
+
+    set(RUNTIMES_${target}-unknown-onyx+asan+noexcept_LLVM_BUILD_COMPILER_RT OFF CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx+asan+noexcept_LLVM_USE_SANITIZER "Address" CACHE STRING "")
+    set(RUNTIMES_${target}-unknown-onyx+asan+noexcept_LIBCXXABI_ENABLE_NEW_DELETE_DEFINITIONS OFF CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx+asan+noexcept_LIBCXX_ENABLE_NEW_DELETE_DEFINITIONS OFF CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx+asan+noexcept_LIBCXXABI_ENABLE_EXCEPTIONS OFF CACHE BOOL "")
+    set(RUNTIMES_${target}-unknown-onyx+asan+noexcept_LIBCXX_ENABLE_EXCEPTIONS OFF CACHE BOOL "")
+
+    # Use .build-id link.
+    list(APPEND RUNTIME_BUILD_ID_LINK "${target}-unknown-onyx")
+  endforeach()
+
+  set(LLVM_RUNTIME_MULTILIBS "asan;noexcept;asan+noexcept" CACHE STRING "")
+  set(LLVM_RUNTIME_MULTILIB_asan_TARGETS "x86_64-unknown-onyx" CACHE STRING "")
+  set(LLVM_RUNTIME_MULTILIB_noexcept_TARGETS "x86_64-unknown-onyx" CACHE STRING "")
+  set(LLVM_RUNTIME_MULTILIB_asan+noexcept_TARGETS "x86_64-unknown-onyx" CACHE STRING "")
+endif()
+
+set(LLVM_BUILTIN_TARGETS "${BUILTIN_TARGETS}" CACHE STRING "")
+set(LLVM_RUNTIME_TARGETS "${RUNTIME_TARGETS}" CACHE STRING "")
+set(LLVM_RUNTIME_BUILD_ID_LINK_TARGETS "${RUNTIME_BUILD_ID_LINK}" CACHE STRING "")
+
+# Setup toolchain.
+set(LLVM_INSTALL_TOOLCHAIN_ONLY ON CACHE BOOL "")
+set(LLVM_TOOLCHAIN_TOOLS
+  dsymutil
+  llvm-ar
+  llvm-cov
+  llvm-cxxfilt
+  llvm-dwarfdump
+  llvm-dwp
+  llvm-gsymutil
+  llvm-lib
+  llvm-nm
+  llvm-objcopy
+  llvm-objdump
+  llvm-profdata
+  llvm-ranlib
+  llvm-readelf
+  llvm-readobj
+  llvm-size
+  llvm-strip
+  llvm-symbolizer
+  llvm-xray
+  llvm-config
+  sancov
+  CACHE STRING "")
+
+set(LLVM_DISTRIBUTION_COMPONENTS
+  clang
+  lld
+  LTO
+  clang-apply-replacements
+  clang-doc
+  clang-format
+  clang-resource-headers
+  clang-include-fixer
+  clang-refactor
+  clang-scan-deps
+  clang-tidy
+  clangd
+  builtins
+  runtimes
+  ${LLVM_TOOLCHAIN_TOOLS}
+  CACHE STRING "")
diff -Naur llvm-project-13.0.0/clang/lib/Basic/Targets/OSTargets.h llvm-project-13.0.0-patched/clang/lib/Basic/Targets/OSTargets.h
--- llvm-project-13.0.0/clang/lib/Basic/Targets/OSTargets.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/clang/lib/Basic/Targets/OSTargets.h	2022-02-03 15:24:18.478478979 +0000
@@ -899,6 +899,53 @@
   }
 };
 
+// Onyx target
+template <typename Target>
+class LLVM_LIBRARY_VISIBILITY OnyxTargetInfo : public OSTargetInfo<Target> {
+protected:
+  void getOSDefines(const LangOptions &Opts, const llvm::Triple &Triple,
+                    MacroBuilder &Builder) const override {
+    Builder.defineMacro("__Onyx__");
+    Builder.defineMacro("__ONYX__");
+    Builder.defineMacro("__onyx__");
+    Builder.defineMacro("__onyx");
+    DefineStd(Builder, "unix", Opts);
+    Builder.defineMacro("__ELF__");
+
+    if (this->HasFloat128) 
+      Builder.defineMacro("__FLOAT128__");
+    if (Opts.POSIXThreads)
+      Builder.defineMacro("_REENTRANT");
+    // Required by the libc++ locale support.
+    if (Opts.CPlusPlus)
+      Builder.defineMacro("_GNU_SOURCE");
+  }
+
+public:
+  OnyxTargetInfo(const llvm::Triple &Triple, const TargetOptions &Opts)
+      : OSTargetInfo<Target>(Triple, Opts) {
+    this->WIntType = TargetInfo::UnsignedInt;
+
+    switch (Triple.getArch()) {
+    default:
+      break;
+    case llvm::Triple::mips:
+    case llvm::Triple::mipsel:
+    case llvm::Triple::mips64:
+    case llvm::Triple::mips64el:
+    case llvm::Triple::ppc:
+    case llvm::Triple::ppc64:
+    case llvm::Triple::ppc64le:
+      this->MCountName = "_mcount";
+      break;
+    case llvm::Triple::x86:
+    case llvm::Triple::x86_64:
+      this->HasFloat128 = true;
+      break;
+    }
+  }
+};
+
 // WebAssembly target
 template <typename Target>
 class LLVM_LIBRARY_VISIBILITY WebAssemblyOSTargetInfo
diff -Naur llvm-project-13.0.0/clang/lib/Basic/Targets.cpp llvm-project-13.0.0-patched/clang/lib/Basic/Targets.cpp
--- llvm-project-13.0.0/clang/lib/Basic/Targets.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/clang/lib/Basic/Targets.cpp	2022-02-03 15:24:18.478478979 +0000
@@ -143,6 +143,8 @@
       return new FreeBSDTargetInfo<AArch64leTargetInfo>(Triple, Opts);
     case llvm::Triple::Fuchsia:
       return new FuchsiaTargetInfo<AArch64leTargetInfo>(Triple, Opts);
+    case llvm::Triple::Onyx:
+      return new OnyxTargetInfo<AArch64leTargetInfo>(Triple, Opts);
     case llvm::Triple::Linux:
       return new LinuxTargetInfo<AArch64leTargetInfo>(Triple, Opts);
     case llvm::Triple::NetBSD:
@@ -167,6 +169,8 @@
       return new FreeBSDTargetInfo<AArch64beTargetInfo>(Triple, Opts);
     case llvm::Triple::Fuchsia:
       return new FuchsiaTargetInfo<AArch64beTargetInfo>(Triple, Opts);
+    case llvm::Triple::Onyx:
+      return new OnyxTargetInfo<AArch64beTargetInfo>(Triple, Opts);
     case llvm::Triple::Linux:
       return new LinuxTargetInfo<AArch64beTargetInfo>(Triple, Opts);
     case llvm::Triple::NetBSD:
@@ -418,6 +422,8 @@
       return new OpenBSDTargetInfo<RISCV64TargetInfo>(Triple, Opts);
     case llvm::Triple::Fuchsia:
       return new FuchsiaTargetInfo<RISCV64TargetInfo>(Triple, Opts);
+    case llvm::Triple::Onyx:
+      return new OnyxTargetInfo<RISCV64TargetInfo>(Triple, Opts);
     case llvm::Triple::Linux:
       return new LinuxTargetInfo<RISCV64TargetInfo>(Triple, Opts);
     default:
@@ -510,6 +516,8 @@
       return new FreeBSDTargetInfo<X86_32TargetInfo>(Triple, Opts);
     case llvm::Triple::Fuchsia:
       return new FuchsiaTargetInfo<X86_32TargetInfo>(Triple, Opts);
+    case llvm::Triple::Onyx:
+      return new OnyxTargetInfo<X86_32TargetInfo>(Triple, Opts);
     case llvm::Triple::KFreeBSD:
       return new KFreeBSDTargetInfo<X86_32TargetInfo>(Triple, Opts);
     case llvm::Triple::Minix:
@@ -569,6 +577,8 @@
       return new FreeBSDTargetInfo<X86_64TargetInfo>(Triple, Opts);
     case llvm::Triple::Fuchsia:
       return new FuchsiaTargetInfo<X86_64TargetInfo>(Triple, Opts);
+    case llvm::Triple::Onyx:
+      return new OnyxTargetInfo<X86_64TargetInfo>(Triple, Opts);
     case llvm::Triple::KFreeBSD:
       return new KFreeBSDTargetInfo<X86_64TargetInfo>(Triple, Opts);
     case llvm::Triple::Solaris:
diff -Naur llvm-project-13.0.0/clang/lib/Driver/CMakeLists.txt llvm-project-13.0.0-patched/clang/lib/Driver/CMakeLists.txt
--- llvm-project-13.0.0/clang/lib/Driver/CMakeLists.txt	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/clang/lib/Driver/CMakeLists.txt	2022-02-03 15:24:18.478478979 +0000
@@ -50,6 +50,7 @@
   ToolChains/Flang.cpp
   ToolChains/FreeBSD.cpp
   ToolChains/Fuchsia.cpp
+  ToolChains/Onyx.cpp
   ToolChains/Gnu.cpp
   ToolChains/Haiku.cpp
   ToolChains/HIP.cpp
diff -Naur llvm-project-13.0.0/clang/lib/Driver/Driver.cpp llvm-project-13.0.0-patched/clang/lib/Driver/Driver.cpp
--- llvm-project-13.0.0/clang/lib/Driver/Driver.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/clang/lib/Driver/Driver.cpp	2022-02-03 15:24:18.481812362 +0000
@@ -22,6 +22,7 @@
 #include "ToolChains/DragonFly.h"
 #include "ToolChains/FreeBSD.h"
 #include "ToolChains/Fuchsia.h"
+#include "ToolChains/Onyx.h"
 #include "ToolChains/Gnu.h"
 #include "ToolChains/HIP.h"
 #include "ToolChains/Haiku.h"
@@ -5299,6 +5300,9 @@
     case llvm::Triple::Fuchsia:
       TC = std::make_unique<toolchains::Fuchsia>(*this, Target, Args);
       break;
+     case llvm::Triple::Onyx:
+      TC = std::make_unique<toolchains::Onyx>(*this, Target, Args);
+      break;
     case llvm::Triple::Solaris:
       TC = std::make_unique<toolchains::Solaris>(*this, Target, Args);
       break;
diff -Naur llvm-project-13.0.0/clang/lib/Driver/SanitizerArgs.cpp llvm-project-13.0.0-patched/clang/lib/Driver/SanitizerArgs.cpp
--- llvm-project-13.0.0/clang/lib/Driver/SanitizerArgs.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/clang/lib/Driver/SanitizerArgs.cpp	2022-02-03 15:24:18.481812362 +0000
@@ -765,7 +765,7 @@
   SharedRuntime =
       Args.hasFlag(options::OPT_shared_libsan, options::OPT_static_libsan,
                    TC.getTriple().isAndroid() || TC.getTriple().isOSFuchsia() ||
-                       TC.getTriple().isOSDarwin());
+                       TC.getTriple().isOSDarwin() || TC.getTriple().isOSOnyx());
 
   ImplicitCfiRuntime = TC.getTriple().isAndroid();
 
diff -Naur llvm-project-13.0.0/clang/lib/Driver/ToolChains/Arch/RISCV.cpp llvm-project-13.0.0-patched/clang/lib/Driver/ToolChains/Arch/RISCV.cpp
--- llvm-project-13.0.0/clang/lib/Driver/ToolChains/Arch/RISCV.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/clang/lib/Driver/ToolChains/Arch/RISCV.cpp	2022-02-03 17:27:32.816935263 +0000
@@ -7,15 +7,15 @@
 //===----------------------------------------------------------------------===//
 
 #include "RISCV.h"
+#include "ToolChains/CommonArgs.h"
 #include "clang/Basic/CharInfo.h"
 #include "clang/Driver/Driver.h"
 #include "clang/Driver/DriverDiagnostic.h"
 #include "clang/Driver/Options.h"
-#include "llvm/Option/ArgList.h"
 #include "llvm/ADT/Optional.h"
+#include "llvm/Option/ArgList.h"
 #include "llvm/Support/TargetParser.h"
 #include "llvm/Support/raw_ostream.h"
-#include "ToolChains/CommonArgs.h"
 
 using namespace clang::driver;
 using namespace clang::driver::tools;
@@ -56,8 +56,7 @@
 
 // If the extension is supported as experimental, return the version of that
 // extension that the compiler currently supports.
-static Optional<RISCVExtensionVersion>
-isExperimentalExtension(StringRef Ext) {
+static Optional<RISCVExtensionVersion> isExperimentalExtension(StringRef Ext) {
   if (Ext == "b" || Ext == "zba" || Ext == "zbb" || Ext == "zbc" ||
       Ext == "zbe" || Ext == "zbf" || Ext == "zbm" || Ext == "zbp" ||
       Ext == "zbr" || Ext == "zbs" || Ext == "zbt" || Ext == "zbproposedc")
@@ -96,9 +95,9 @@
     // Expected 'p' to be followed by minor version number.
     if (Minor.empty()) {
       std::string Error =
-        "minor version number missing after 'p' for extension";
+          "minor version number missing after 'p' for extension";
       D.Diag(diag::err_drv_invalid_riscv_ext_arch_name)
-        << MArch << Error << Ext;
+          << MArch << Error << Ext;
       return false;
     }
   }
@@ -116,8 +115,8 @@
   // If experimental extension, require use of current version number number
   if (auto ExperimentalExtension = isExperimentalExtension(Ext)) {
     if (!Args.hasArg(options::OPT_menable_experimental_extensions)) {
-      std::string Error =
-          "requires '-menable-experimental-extensions' for experimental extension";
+      std::string Error = "requires '-menable-experimental-extensions' for "
+                          "experimental extension";
       D.Diag(diag::err_drv_invalid_riscv_ext_arch_name)
           << MArch << Error << Ext;
       return false;
@@ -130,13 +129,12 @@
     }
     auto SupportedVers = *ExperimentalExtension;
     if (Major != SupportedVers.Major || Minor != SupportedVers.Minor) {
-      std::string Error =
-          "unsupported version number " + Major;
+      std::string Error = "unsupported version number " + Major;
       if (!Minor.empty())
         Error += "." + Minor;
-      Error += " for experimental extension (this compiler supports "
-            + SupportedVers.Major.str() + "."
-            + SupportedVers.Minor.str() + ")";
+      Error += " for experimental extension (this compiler supports " +
+               SupportedVers.Major.str() + "." + SupportedVers.Minor.str() +
+               ")";
 
       D.Diag(diag::err_drv_invalid_riscv_ext_arch_name)
           << MArch << Error << Ext;
@@ -168,8 +166,7 @@
 // canonical order, might have a version number (major, minor)
 // and are separated by a single underscore '_'.
 // Set the hardware features for the extensions that are supported.
-static void getExtensionFeatures(const Driver &D,
-                                 const ArgList &Args,
+static void getExtensionFeatures(const Driver &D, const ArgList &Args,
                                  std::vector<StringRef> &Features,
                                  StringRef &MArch, StringRef &Exts) {
   if (Exts.empty())
@@ -188,8 +185,8 @@
 
   for (StringRef Ext : Split) {
     if (Ext.empty()) {
-      D.Diag(diag::err_drv_invalid_riscv_arch_name) << MArch
-        << "extension name missing after separator '_'";
+      D.Diag(diag::err_drv_invalid_riscv_arch_name)
+          << MArch << "extension name missing after separator '_'";
       return;
     }
 
@@ -201,7 +198,7 @@
 
     if (Type.empty()) {
       D.Diag(diag::err_drv_invalid_riscv_ext_arch_name)
-        << MArch << "invalid extension prefix" << Ext;
+          << MArch << "invalid extension prefix" << Ext;
       return;
     }
 
@@ -213,7 +210,7 @@
       std::string Error = std::string(Desc);
       Error += " not given in canonical order";
       D.Diag(diag::err_drv_invalid_riscv_ext_arch_name)
-        << MArch <<  Error << Ext;
+          << MArch << Error << Ext;
       return;
     }
 
@@ -224,7 +221,7 @@
       std::string Error = std::string(Desc);
       Error += " name missing after";
       D.Diag(diag::err_drv_invalid_riscv_ext_arch_name)
-        << MArch << Error << Type;
+          << MArch << Error << Type;
       return;
     }
 
@@ -237,7 +234,7 @@
       std::string Error = "duplicated ";
       Error += Desc;
       D.Diag(diag::err_drv_invalid_riscv_ext_arch_name)
-        << MArch << Error << Name;
+          << MArch << Error << Name;
       return;
     }
 
@@ -255,7 +252,7 @@
       std::string Error = "unsupported ";
       Error += Desc;
       D.Diag(diag::err_drv_invalid_riscv_ext_arch_name)
-        << MArch << Error << Ext;
+          << MArch << Error << Ext;
       return;
     }
     if (Ext == "zvlsseg") {
@@ -361,7 +358,7 @@
   auto StdExtsItr = StdExts.begin();
   auto StdExtsEnd = StdExts.end();
 
-  for (auto I = Exts.begin(), E = Exts.end(); I != E; ) {
+  for (auto I = Exts.begin(), E = Exts.end(); I != E;) {
     char c = *I;
 
     // Check ISA extensions are specified in the canonical order.
@@ -564,14 +561,16 @@
 
   // GCC Compatibility: -mno-save-restore is default, unless -msave-restore is
   // specified.
-  if (Args.hasFlag(options::OPT_msave_restore, options::OPT_mno_save_restore, false))
+  if (Args.hasFlag(options::OPT_msave_restore, options::OPT_mno_save_restore,
+                   false))
     Features.push_back("+save-restore");
   else
     Features.push_back("-save-restore");
 
   // Now add any that the user explicitly requested on the command line,
   // which may override the defaults.
-  handleTargetFeaturesGroup(Args, Features, options::OPT_m_riscv_Features_Group);
+  handleTargetFeaturesGroup(Args, Features,
+                            options::OPT_m_riscv_Features_Group);
 }
 
 StringRef riscv::getRISCVABI(const ArgList &Args, const llvm::Triple &Triple) {
diff -Naur llvm-project-13.0.0/clang/lib/Driver/ToolChains/Onyx.cpp llvm-project-13.0.0-patched/clang/lib/Driver/ToolChains/Onyx.cpp
--- llvm-project-13.0.0/clang/lib/Driver/ToolChains/Onyx.cpp	1970-01-01 01:00:00.000000000 +0100
+++ llvm-project-13.0.0-patched/clang/lib/Driver/ToolChains/Onyx.cpp	2022-02-03 17:27:45.357113149 +0000
@@ -0,0 +1,433 @@
+//===--- Onyx.cpp - Onyx ToolChain Implementations --------*- C++ -*-===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+#include "Onyx.h"
+#include "CommonArgs.h"
+#include "clang/Config/config.h"
+#include "clang/Driver/Compilation.h"
+#include "clang/Driver/Driver.h"
+#include "clang/Driver/DriverDiagnostic.h"
+#include "clang/Driver/Options.h"
+#include "clang/Driver/SanitizerArgs.h"
+#include "llvm/Option/ArgList.h"
+#include "llvm/Support/FileSystem.h"
+#include "llvm/Support/Path.h"
+#include "llvm/Support/VirtualFileSystem.h"
+
+using namespace clang::driver;
+using namespace clang::driver::toolchains;
+using namespace clang::driver::tools;
+using namespace clang;
+using namespace llvm::opt;
+
+using tools::addMultilibFlag;
+
+static bool getStatic(const ArgList &Args) {
+  return Args.hasArg(options::OPT_static) &&
+         !Args.hasArg(options::OPT_static_pie);
+}
+
+static bool getPIE(const ArgList &Args, const ToolChain &TC) {
+  if (Args.hasArg(options::OPT_shared) || Args.hasArg(options::OPT_static) ||
+      Args.hasArg(options::OPT_r) || Args.hasArg(options::OPT_static_pie))
+    return false;
+
+  Arg *A = Args.getLastArg(options::OPT_pie, options::OPT_no_pie,
+                           options::OPT_nopie);
+  if (!A)
+    return TC.isPIEDefault();
+  return A->getOption().matches(options::OPT_pie);
+}
+
+static bool getStaticPIE(const ArgList &Args, const ToolChain &TC) {
+  bool HasStaticPIE = Args.hasArg(options::OPT_static_pie);
+  // -no-pie is an alias for -nopie. So, handling -nopie takes care of
+  // -no-pie as well.
+  if (HasStaticPIE && Args.hasArg(options::OPT_nopie)) {
+    const Driver &D = TC.getDriver();
+    const llvm::opt::OptTable &Opts = D.getOpts();
+    const char *StaticPIEName = Opts.getOptionName(options::OPT_static_pie);
+    const char *NoPIEName = Opts.getOptionName(options::OPT_nopie);
+    D.Diag(diag::err_drv_cannot_mix_options) << StaticPIEName << NoPIEName;
+  }
+  return HasStaticPIE;
+}
+
+void onyx::Linker::ConstructJob(Compilation &C, const JobAction &JA,
+                                const InputInfo &Output,
+                                const InputInfoList &Inputs,
+                                const ArgList &Args,
+                                const char *LinkingOutput) const {
+  const toolchains::Onyx &ToolChain =
+      static_cast<const toolchains::Onyx &>(getToolChain());
+  const Driver &D = ToolChain.getDriver();
+
+  ArgStringList CmdArgs;
+
+  // Silence warning for "clang -g foo.o -o foo"
+  Args.ClaimAllArgs(options::OPT_g_Group);
+  // and "clang -emit-llvm foo.o -o foo"
+  Args.ClaimAllArgs(options::OPT_emit_llvm);
+  // and for "clang -w foo.o -o foo". Other warning options are already
+  // handled somewhere else.
+  Args.ClaimAllArgs(options::OPT_w);
+
+  bool IsPie = getPIE(Args, ToolChain);
+  bool IsStaticPie = getStaticPIE(Args, ToolChain);
+
+  CmdArgs.push_back("-z");
+  CmdArgs.push_back("now");
+
+  const char *Exec = Args.MakeArgString(ToolChain.GetLinkerPath());
+  if (llvm::sys::path::filename(Exec).equals_insensitive("ld.lld") ||
+      llvm::sys::path::stem(Exec).equals_insensitive("ld.lld")) {
+    CmdArgs.push_back("-z");
+    CmdArgs.push_back("rodynamic");
+    CmdArgs.push_back("-z");
+    CmdArgs.push_back("separate-loadable-segments");
+  }
+
+  if (ToolChain.isNoExecStackDefault()) {
+    CmdArgs.push_back("-z");
+    CmdArgs.push_back("noexecstack");
+  }
+
+  if (!D.SysRoot.empty())
+    CmdArgs.push_back(Args.MakeArgString("--sysroot=" + D.SysRoot));
+
+  if (IsPie)
+    CmdArgs.push_back("-pie");
+
+  if (IsStaticPie) {
+    CmdArgs.push_back("-static");
+    CmdArgs.push_back("-pie");
+    CmdArgs.push_back("--no-dynamic-linker");
+    CmdArgs.push_back("-z");
+    CmdArgs.push_back("text");
+  }
+
+  if (Args.hasArg(options::OPT_rdynamic))
+    CmdArgs.push_back("-export-dynamic");
+
+  if (Args.hasArg(options::OPT_s))
+    CmdArgs.push_back("-s");
+
+  if (Args.hasArg(options::OPT_r)) {
+    CmdArgs.push_back("-r");
+  } else {
+    CmdArgs.push_back("--build-id");
+    CmdArgs.push_back("--hash-style=gnu");
+  }
+
+  CmdArgs.push_back("--eh-frame-hdr");
+
+  if (Args.hasArg(options::OPT_static))
+    CmdArgs.push_back("-static");
+  else if (Args.hasArg(options::OPT_shared))
+    CmdArgs.push_back("-shared");
+
+  const SanitizerArgs &SanArgs = ToolChain.getSanitizerArgs();
+  bool is_static = getStatic(Args);
+
+  if (!is_static) {
+    if (!Args.hasArg(options::OPT_shared) && !IsStaticPie) {
+      std::string Dyld = D.DyldPrefix;
+      // TODO: Is this needed?
+#if 0
+		if (SanArgs.needsAsanRt() && SanArgs.needsSharedRt())
+      		Dyld += "asan/";
+#endif
+      std::string DyldSuffix =
+          std::string("-") + ToolChain.getTriple().getArchName().str();
+
+      Dyld += std::string("/lib/ld-onyx") + DyldSuffix + ".so";
+      CmdArgs.push_back("-dynamic-linker");
+      CmdArgs.push_back(Args.MakeArgString(Dyld));
+    }
+  }
+
+  CmdArgs.push_back("-o");
+  CmdArgs.push_back(Output.getFilename());
+
+  if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nostartfiles)) {
+    const char *crt1 = nullptr;
+    if (!Args.hasArg(options::OPT_shared)) {
+      if (IsPie)
+        crt1 = "Scrt1.o";
+      else if (IsStaticPie)
+        crt1 = "rcrt1.o";
+      else
+        crt1 = "crt1.o";
+    }
+
+    if (crt1)
+      CmdArgs.push_back(Args.MakeArgString(ToolChain.GetFilePath(crt1)));
+
+    // CmdArgs.push_back(Args.MakeArgString(ToolChain.GetFilePath("crti.o")));
+  }
+
+  Args.AddAllArgs(CmdArgs, options::OPT_L);
+  Args.AddAllArgs(CmdArgs, options::OPT_u);
+
+  ToolChain.AddFilePathLibArgs(Args, CmdArgs);
+
+  if (D.isUsingLTO()) {
+    assert(!Inputs.empty() && "Must have at least one input.");
+    addLTOOptions(ToolChain, Args, CmdArgs, Output, Inputs[0],
+                  D.getLTOMode() == LTOK_Thin);
+  }
+
+  bool NeedsSanitizerDeps = addSanitizerRuntimes(ToolChain, Args, CmdArgs);
+  bool NeedsXRayDeps = addXRayRuntime(ToolChain, Args, CmdArgs);
+  AddLinkerInputs(ToolChain, Inputs, Args, CmdArgs, JA);
+  ToolChain.addProfileRTLibs(Args, CmdArgs);
+
+  if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nodefaultlibs)) {
+
+    if (D.CCCIsCXX()) {
+      if (ToolChain.ShouldLinkCXXStdlib(Args)) {
+        bool OnlyLibstdcxxStatic = Args.hasArg(options::OPT_static_libstdcxx) &&
+                                   !Args.hasArg(options::OPT_static);
+        CmdArgs.push_back("--push-state");
+        CmdArgs.push_back("--as-needed");
+        if (OnlyLibstdcxxStatic)
+          CmdArgs.push_back("-Bstatic");
+        ToolChain.AddCXXStdlibLibArgs(Args, CmdArgs);
+        if (OnlyLibstdcxxStatic)
+          CmdArgs.push_back("-Bdynamic");
+        CmdArgs.push_back("-lm");
+        CmdArgs.push_back("--pop-state");
+      }
+    }
+
+    if (NeedsSanitizerDeps)
+      linkSanitizerRuntimeDeps(ToolChain, CmdArgs);
+
+    if (NeedsXRayDeps)
+      linkXRayRuntimeDeps(ToolChain, CmdArgs);
+
+    AddRunTimeLibs(ToolChain, D, CmdArgs, Args);
+
+    if (Args.hasArg(options::OPT_pthread) || Args.hasArg(options::OPT_pthreads))
+      CmdArgs.push_back("-lpthread");
+
+    if (Args.hasArg(options::OPT_fsplit_stack))
+      CmdArgs.push_back("--wrap=pthread_create");
+
+    if (!Args.hasArg(options::OPT_nolibc))
+      CmdArgs.push_back("-lc");
+
+    // CmdArgs.push_back(Args.MakeArgString(ToolChain.GetFilePath("crtn.o")));
+  }
+
+  C.addCommand(std::make_unique<Command>(JA, *this, ResponseFileSupport::None(),
+                                         Exec, CmdArgs, Inputs));
+}
+
+/// Onyx - Onyx tool chain which can call as(1) and ld(1) directly.
+
+Onyx::Onyx(const Driver &D, const llvm::Triple &Triple, const ArgList &Args)
+    : ToolChain(D, Triple, Args) {
+  getProgramPaths().push_back(getDriver().getInstalledDir());
+  if (getDriver().getInstalledDir() != D.Dir)
+    getProgramPaths().push_back(D.Dir);
+
+  if (!D.SysRoot.empty()) {
+    SmallString<128> P(D.SysRoot);
+    llvm::sys::path::append(P, "usr/lib");
+    getFilePaths().push_back(std::string(P.str()));
+  }
+
+  auto FilePaths = [&](const Multilib &M) -> std::vector<std::string> {
+    std::vector<std::string> FP;
+    SmallString<128> P(getStdlibPath());
+    llvm::sys::path::append(P, M.gccSuffix());
+    FP.push_back(std::string(P.str()));
+    return FP;
+  };
+
+  Multilibs.push_back(Multilib());
+  // Use the noexcept variant with -fno-exceptions to avoid the extra overhead.
+  Multilibs.push_back(Multilib("noexcept", {}, {}, 1)
+                          .flag("-fexceptions")
+                          .flag("+fno-exceptions"));
+  // ASan has higher priority because we always want the instrumentated version.
+  Multilibs.push_back(Multilib("asan", {}, {}, 2).flag("+fsanitize=address"));
+  // Use the asan+noexcept variant with ASan and -fno-exceptions.
+  Multilibs.push_back(Multilib("asan+noexcept", {}, {}, 3)
+                          .flag("+fsanitize=address")
+                          .flag("-fexceptions")
+                          .flag("+fno-exceptions"));
+  Multilibs.FilterOut([&](const Multilib &M) {
+    std::vector<std::string> RD = FilePaths(M);
+    return std::all_of(RD.begin(), RD.end(),
+                       [&](std::string P) { return !getVFS().exists(P); });
+  });
+
+  Multilib::flags_list Flags;
+  addMultilibFlag(
+      Args.hasFlag(options::OPT_fexceptions, options::OPT_fno_exceptions, true),
+      "fexceptions", Flags);
+  addMultilibFlag(getSanitizerArgs().needsAsanRt(), "fsanitize=address", Flags);
+  Multilibs.setFilePathsCallback(FilePaths);
+
+  if (Multilibs.select(Flags, SelectedMultilib))
+    if (!SelectedMultilib.isDefault())
+      if (const auto &PathsCallback = Multilibs.filePathsCallback())
+        for (const auto &Path : PathsCallback(SelectedMultilib))
+          // Prepend the multilib path to ensure it takes the precedence.
+          getFilePaths().insert(getFilePaths().begin(), Path);
+}
+
+std::string Onyx::ComputeEffectiveClangTriple(const ArgList &Args,
+                                              types::ID InputType) const {
+  llvm::Triple Triple(ComputeLLVMTriple(Args, InputType));
+  return Triple.str();
+}
+
+Tool *Onyx::buildLinker() const { return new tools::onyx::Linker(*this); }
+
+void Onyx::addClangTargetOptions(const ArgList &DriverArgs,
+                                 ArgStringList &CC1Args,
+                                 Action::OffloadKind) const {
+  if (!DriverArgs.hasFlag(options::OPT_fuse_init_array,
+                          options::OPT_fno_use_init_array, true))
+    CC1Args.push_back("-fno-use-init-array");
+
+#if 0
+  // lld doesn't support R_RISCV_ALIGN, which stops us from enabling relaxations
+  if (getTriple().isRISCV())
+    CC1Args.push_back("-mno-relax");
+#endif
+}
+
+void Onyx::AddClangSystemIncludeArgs(const ArgList &DriverArgs,
+                                     ArgStringList &CC1Args) const {
+  const Driver &D = getDriver();
+
+  if (DriverArgs.hasArg(options::OPT_nostdinc))
+    return;
+
+  if (!DriverArgs.hasArg(options::OPT_nobuiltininc)) {
+    SmallString<128> P(D.ResourceDir);
+    llvm::sys::path::append(P, "include");
+    addSystemInclude(DriverArgs, CC1Args, P);
+  }
+
+  if (DriverArgs.hasArg(options::OPT_nostdlibinc))
+    return;
+
+  // Check for configure-time C include directories.
+  StringRef CIncludeDirs(C_INCLUDE_DIRS);
+  if (CIncludeDirs != "") {
+    SmallVector<StringRef, 5> dirs;
+    CIncludeDirs.split(dirs, ":");
+    for (StringRef dir : dirs) {
+      StringRef Prefix =
+          llvm::sys::path::is_absolute(dir) ? StringRef(D.SysRoot) : "";
+      addExternCSystemInclude(DriverArgs, CC1Args, Prefix + dir);
+    }
+    return;
+  }
+
+  if (!D.SysRoot.empty()) {
+    SmallString<128> P(D.SysRoot);
+    llvm::sys::path::append(P, "include");
+    addExternCSystemInclude(DriverArgs, CC1Args, P.str());
+  }
+}
+
+void Onyx::AddClangCXXStdlibIncludeArgs(const ArgList &DriverArgs,
+                                        ArgStringList &CC1Args) const {
+  if (DriverArgs.hasArg(options::OPT_nostdlibinc) ||
+      DriverArgs.hasArg(options::OPT_nostdincxx))
+    return;
+
+  const Driver &D = getDriver();
+  std::string Target = getTripleString();
+
+  auto AddCXXIncludePath = [&](StringRef Path) {
+    std::string Version = detectLibcxxVersion(Path);
+    if (Version.empty())
+      return;
+
+    // First add the per-target include path.
+    SmallString<128> TargetDir(Path);
+    llvm::sys::path::append(TargetDir, Target, "c++", Version);
+    if (getVFS().exists(TargetDir))
+      addSystemInclude(DriverArgs, CC1Args, TargetDir);
+
+    // Second add the generic one.
+    SmallString<128> Dir(Path);
+    llvm::sys::path::append(Dir, "c++", Version);
+    addSystemInclude(DriverArgs, CC1Args, Dir);
+  };
+
+  switch (GetCXXStdlibType(DriverArgs)) {
+  case ToolChain::CST_Libcxx: {
+    SmallString<128> P(D.Dir);
+    llvm::sys::path::append(P, "..", "include");
+    AddCXXIncludePath(P);
+    break;
+  }
+
+  default:
+    llvm_unreachable("invalid stdlib name");
+  }
+}
+
+void Onyx::AddCXXStdlibLibArgs(const ArgList &Args,
+                               ArgStringList &CmdArgs) const {
+  switch (GetCXXStdlibType(Args)) {
+  case ToolChain::CST_Libcxx:
+    CmdArgs.push_back("-lc++");
+    break;
+
+  case ToolChain::CST_Libstdcxx:
+    CmdArgs.push_back("-lstdc++");
+    break;
+  }
+}
+
+SanitizerMask Onyx::getSupportedSanitizers() const {
+  SanitizerMask Res = ToolChain::getSupportedSanitizers();
+  Res |= SanitizerKind::Address;
+  Res |= SanitizerKind::KernelAddress;
+  Res |= SanitizerKind::PointerCompare;
+  Res |= SanitizerKind::PointerSubtract;
+  Res |= SanitizerKind::Fuzzer;
+  Res |= SanitizerKind::FuzzerNoLink;
+  Res |= SanitizerKind::Leak;
+  Res |= SanitizerKind::SafeStack;
+  Res |= SanitizerKind::Scudo;
+  Res |= SanitizerKind::Thread;
+  Res |= SanitizerKind::Memory;
+  Res |= SanitizerKind::KernelMemory;
+  return Res;
+}
+
+SanitizerMask Onyx::getDefaultSanitizers() const {
+  SanitizerMask Res;
+
+  // TODO: Enable this stuff by default, like Fuchsia
+#if 0
+  switch (getTriple().getArch()) {
+  case llvm::Triple::aarch64:
+    Res |= SanitizerKind::ShadowCallStack;
+    break;
+  case llvm::Triple::x86_64:
+    Res |= SanitizerKind::SafeStack;
+    break;
+  default:
+    // TODO: Enable SafeStack on RISC-V once tested.
+    break;
+  }
+#endif
+
+  return Res;
+}
diff -Naur llvm-project-13.0.0/clang/lib/Driver/ToolChains/Onyx.h llvm-project-13.0.0-patched/clang/lib/Driver/ToolChains/Onyx.h
--- llvm-project-13.0.0/clang/lib/Driver/ToolChains/Onyx.h	1970-01-01 01:00:00.000000000 +0100
+++ llvm-project-13.0.0-patched/clang/lib/Driver/ToolChains/Onyx.h	2022-02-03 15:24:18.481812362 +0000
@@ -0,0 +1,101 @@
+//===--- Onyx.h - Onyx ToolChain Implementations ----------*- C++ -*-===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_ONYX_H
+#define LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_ONYX_H
+
+#include "Gnu.h"
+#include "clang/Driver/Tool.h"
+#include "clang/Driver/ToolChain.h"
+
+namespace clang {
+namespace driver {
+namespace tools {
+namespace onyx {
+class LLVM_LIBRARY_VISIBILITY Linker : public Tool {
+public:
+  Linker(const ToolChain &TC) : Tool("onyx::Linker", "ld.lld", TC) {}
+
+  bool hasIntegratedCPP() const override { return false; }
+  bool isLinkJob() const override { return true; }
+
+  void ConstructJob(Compilation &C, const JobAction &JA,
+                    const InputInfo &Output, const InputInfoList &Inputs,
+                    const llvm::opt::ArgList &TCArgs,
+                    const char *LinkingOutput) const override;
+};
+} // end namespace onyx
+} // end namespace tools
+
+namespace toolchains {
+
+class LLVM_LIBRARY_VISIBILITY Onyx : public ToolChain {
+public:
+  Onyx(const Driver &D, const llvm::Triple &Triple,
+          const llvm::opt::ArgList &Args);
+
+  bool HasNativeLLVMSupport() const override { return true; }
+  bool IsIntegratedAssemblerDefault() const override { return true; }
+  bool IsMathErrnoDefault() const override { return false; }
+  bool useRelaxRelocations() const override { return true; };
+  RuntimeLibType GetDefaultRuntimeLibType() const override {
+    return ToolChain::RLT_CompilerRT;
+  }
+  CXXStdlibType GetDefaultCXXStdlibType() const override {
+    return ToolChain::CST_Libcxx;
+  }
+  bool IsUnwindTablesDefault(const llvm::opt::ArgList &Args) const override {
+    return true;
+  }
+  bool isPICDefault() const override { return false; }
+  bool isPIEDefault() const override { return true; }
+  bool isPICDefaultForced() const override { return false; }
+  llvm::DebuggerKind getDefaultDebuggerTuning() const override {
+    return llvm::DebuggerKind::GDB;
+  }
+
+  LangOptions::StackProtectorMode GetDefaultStackProtectorLevel(bool KernelOrKext) const override {
+    return LangOptions::SSPStrong; // SSPStrong
+  }
+
+  std::string ComputeEffectiveClangTriple(const llvm::opt::ArgList &Args,
+                                          types::ID InputType) const override;
+
+  SanitizerMask getSupportedSanitizers() const override;
+  SanitizerMask getDefaultSanitizers() const override;
+
+  void addClangTargetOptions(const llvm::opt::ArgList &DriverArgs,
+                             llvm::opt::ArgStringList &CC1Args,
+                             Action::OffloadKind DeviceOffloadKind) const override;
+  void
+  AddClangSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                            llvm::opt::ArgStringList &CC1Args) const override;
+  void
+  AddClangCXXStdlibIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                               llvm::opt::ArgStringList &CC1Args) const override;
+  void AddCXXStdlibLibArgs(const llvm::opt::ArgList &Args,
+                           llvm::opt::ArgStringList &CmdArgs) const override;
+
+  const char *getDefaultLinker() const override {
+    // TODO: Consider switching to ld.lld
+	return "ld.lld";
+  }
+
+  bool isNoExecStackDefault() const override {
+    return true;
+  }
+
+protected:
+  Tool *buildLinker() const override;
+};
+
+} // end namespace toolchains
+} // end namespace driver
+} // end namespace clang
+
+#endif // LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_ONYX_H
diff -Naur llvm-project-13.0.0/clang/lib/Driver/XRayArgs.cpp llvm-project-13.0.0-patched/clang/lib/Driver/XRayArgs.cpp
--- llvm-project-13.0.0/clang/lib/Driver/XRayArgs.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/clang/lib/Driver/XRayArgs.cpp	2022-02-03 15:24:18.485145745 +0000
@@ -35,7 +35,7 @@
   if (!Args.hasFlag(options::OPT_fxray_instrument,
                     options::OPT_fno_xray_instrument, false))
     return;
-  if (Triple.getOS() == llvm::Triple::Linux) {
+  if (Triple.getOS() == llvm::Triple::Linux || Triple.isOSOnyx()) {
     switch (Triple.getArch()) {
     case llvm::Triple::x86_64:
     case llvm::Triple::arm:
diff -Naur llvm-project-13.0.0/compiler-rt/cmake/config-ix.cmake llvm-project-13.0.0-patched/compiler-rt/cmake/config-ix.cmake
--- llvm-project-13.0.0/compiler-rt/cmake/config-ix.cmake	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/cmake/config-ix.cmake	2022-02-03 15:24:18.485145745 +0000
@@ -656,7 +656,7 @@
 list_replace(COMPILER_RT_SANITIZERS_TO_BUILD all "${ALL_SANITIZERS}")
 
 if (SANITIZER_COMMON_SUPPORTED_ARCH AND NOT LLVM_USE_SANITIZER AND
-    (OS_NAME MATCHES "Android|Darwin|Linux|FreeBSD|NetBSD|Fuchsia|SunOS" OR
+    (OS_NAME MATCHES "Android|Darwin|Linux|FreeBSD|NetBSD|Fuchsia|SunOS|Onyx" OR
     (OS_NAME MATCHES "Windows" AND NOT CYGWIN AND
         (NOT MINGW OR CMAKE_CXX_COMPILER_ID MATCHES "Clang"))))
   set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)
@@ -705,7 +705,7 @@
 endif()
 
 if (COMPILER_RT_HAS_SANITIZER_COMMON AND MSAN_SUPPORTED_ARCH AND
-    OS_NAME MATCHES "Linux|FreeBSD|NetBSD")
+    OS_NAME MATCHES "Linux|FreeBSD|NetBSD|Onyx")
   set(COMPILER_RT_HAS_MSAN TRUE)
 else()
   set(COMPILER_RT_HAS_MSAN FALSE)
@@ -733,14 +733,14 @@
 endif()
 
 if (COMPILER_RT_HAS_SANITIZER_COMMON AND TSAN_SUPPORTED_ARCH AND
-    OS_NAME MATCHES "Darwin|Linux|FreeBSD|Android|NetBSD")
+    OS_NAME MATCHES "Darwin|Linux|FreeBSD|Android|NetBSD|Onyx")
   set(COMPILER_RT_HAS_TSAN TRUE)
 else()
   set(COMPILER_RT_HAS_TSAN FALSE)
 endif()
 
 if (COMPILER_RT_HAS_SANITIZER_COMMON AND UBSAN_SUPPORTED_ARCH AND
-    OS_NAME MATCHES "Darwin|Linux|FreeBSD|NetBSD|Windows|Android|Fuchsia|SunOS")
+    OS_NAME MATCHES "Darwin|Linux|FreeBSD|NetBSD|Windows|Android|Fuchsia|SunOS|Onyx")
   set(COMPILER_RT_HAS_UBSAN TRUE)
 else()
   set(COMPILER_RT_HAS_UBSAN FALSE)
@@ -754,7 +754,7 @@
 endif()
 
 if (COMPILER_RT_HAS_SANITIZER_COMMON AND SAFESTACK_SUPPORTED_ARCH AND
-    OS_NAME MATCHES "Linux|FreeBSD|NetBSD")
+    OS_NAME MATCHES "Linux|FreeBSD|NetBSD|Onyx")
   set(COMPILER_RT_HAS_SAFESTACK TRUE)
 else()
   set(COMPILER_RT_HAS_SAFESTACK FALSE)
@@ -775,14 +775,14 @@
 endif()
 
 if (COMPILER_RT_HAS_SANITIZER_COMMON AND SCUDO_SUPPORTED_ARCH AND
-    OS_NAME MATCHES "Linux|Android|Fuchsia")
+    OS_NAME MATCHES "Linux|Android|Fuchsia|Onyx")
   set(COMPILER_RT_HAS_SCUDO TRUE)
 else()
   set(COMPILER_RT_HAS_SCUDO FALSE)
 endif()
 
 if (COMPILER_RT_HAS_SANITIZER_COMMON AND XRAY_SUPPORTED_ARCH AND
-    OS_NAME MATCHES "Darwin|Linux|FreeBSD|NetBSD|Fuchsia")
+    OS_NAME MATCHES "Darwin|Linux|FreeBSD|NetBSD|Fuchsia|Onyx")
   set(COMPILER_RT_HAS_XRAY TRUE)
 else()
   set(COMPILER_RT_HAS_XRAY FALSE)
@@ -795,14 +795,14 @@
 endif()
 
 if (COMPILER_RT_HAS_SANITIZER_COMMON AND FUZZER_SUPPORTED_ARCH AND
-    OS_NAME MATCHES "Android|Darwin|Linux|NetBSD|FreeBSD|Fuchsia|Windows")
+    OS_NAME MATCHES "Android|Darwin|Linux|NetBSD|FreeBSD|Fuchsia|Windows|Onyx")
   set(COMPILER_RT_HAS_FUZZER TRUE)
 else()
   set(COMPILER_RT_HAS_FUZZER FALSE)
 endif()
 
 if (COMPILER_RT_HAS_SANITIZER_COMMON AND SHADOWCALLSTACK_SUPPORTED_ARCH AND
-    OS_NAME MATCHES "Linux|Android")
+    OS_NAME MATCHES "Linux|Android|Onyx")
   set(COMPILER_RT_HAS_SHADOWCALLSTACK TRUE)
 else()
   set(COMPILER_RT_HAS_SHADOWCALLSTACK FALSE)
diff -Naur llvm-project-13.0.0/compiler-rt/CMakeLists.txt llvm-project-13.0.0-patched/compiler-rt/CMakeLists.txt
--- llvm-project-13.0.0/compiler-rt/CMakeLists.txt	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/CMakeLists.txt	2022-02-03 15:24:18.485145745 +0000
@@ -194,7 +194,7 @@
     if (APPLE OR CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
       set(${var}_LIBNAME "libc++")
       set(${var}_SYSTEM 1)
-    elseif (FUCHSIA)
+    elseif (FUCHSIA OR ONYX)
       set(${var}_LIBNAME "libc++")
       set(${var}_INTREE 1)
     else()
@@ -223,7 +223,7 @@
 handle_default_cxx_lib(SANITIZER_TEST_CXX)
 
 set(DEFAULT_SANITIZER_USE_STATIC_LLVM_UNWINDER OFF)
-if (FUCHSIA)
+if (FUCHSIA OR ONYX)
   set(DEFAULT_SANITIZER_USE_STATIC_LLVM_UNWINDER ON)
 elseif (DEFINED LIBUNWIND_ENABLE_SHARED AND NOT LIBUNWIND_ENABLE_SHARED)
   set(DEFAULT_SANITIZER_USE_STATIC_LLVM_UNWINDER ON)
@@ -485,6 +485,10 @@
 list(APPEND COMPILER_RT_COMMON_CFLAGS ${stdlib_flag})
 list(APPEND COMPILER_RT_COMMON_LINK_FLAGS ${stdlib_flag})
 
+if("${CMAKE_SYSTEM_NAME}" STREQUAL "Onyx")
+  list(APPEND SANITIZER_COMMON_LINK_FLAGS -Wl,-z,defs,-z,now,-z,relro)
+endif()
+
 macro(append_libcxx_libs var)
   if (${var}_INTREE)
     if (SANITIZER_USE_STATIC_LLVM_UNWINDER AND (TARGET unwind_static OR HAVE_LIBUNWIND))
diff -Naur llvm-project-13.0.0/compiler-rt/lib/asan/asan_linux.cpp llvm-project-13.0.0-patched/compiler-rt/lib/asan/asan_linux.cpp
--- llvm-project-13.0.0/compiler-rt/lib/asan/asan_linux.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/asan/asan_linux.cpp	2022-02-03 15:24:18.485145745 +0000
@@ -13,7 +13,7 @@
 
 #include "sanitizer_common/sanitizer_platform.h"
 #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 
 #include "asan_interceptors.h"
 #include "asan_internal.h"
@@ -58,6 +58,7 @@
 extern ElfW(Dyn) _DYNAMIC[];
 #endif
 
+
 // x86-64 FreeBSD 9.2 and older define 'ucontext_t' incorrectly in
 // 32-bit mode.
 #if SANITIZER_FREEBSD && (SANITIZER_WORDSIZE == 32) && \
@@ -139,7 +140,7 @@
   if (internal_strncmp(info->dlpi_name, "linux-", sizeof("linux-") - 1) == 0)
     return 0;
 
-#if SANITIZER_FREEBSD || SANITIZER_NETBSD
+#if SANITIZER_FREEBSD || SANITIZER_NETBSD || SANITIZER_ONYX
   // Ignore first entry (the main program)
   char **p = (char **)data;
   if (!(*p)) {
@@ -240,4 +241,4 @@
 } // namespace __asan
 
 #endif  // SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD ||
-        // SANITIZER_SOLARIS
+        // SANITIZER_SOLARIS || SANITIZER_ONYX
diff -Naur llvm-project-13.0.0/compiler-rt/lib/asan/asan_malloc_linux.cpp llvm-project-13.0.0-patched/compiler-rt/lib/asan/asan_malloc_linux.cpp
--- llvm-project-13.0.0/compiler-rt/lib/asan/asan_malloc_linux.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/asan/asan_malloc_linux.cpp	2022-02-03 15:24:18.488479128 +0000
@@ -15,7 +15,7 @@
 
 #include "sanitizer_common/sanitizer_platform.h"
 #if SANITIZER_FREEBSD || SANITIZER_FUCHSIA || SANITIZER_LINUX || \
-    SANITIZER_NETBSD || SANITIZER_SOLARIS
+    SANITIZER_NETBSD || SANITIZER_SOLARIS || SANITIZER_ONYX
 
 #  include "asan_allocator.h"
 #  include "asan_interceptors.h"
diff -Naur llvm-project-13.0.0/compiler-rt/lib/builtins/assembly.h llvm-project-13.0.0-patched/compiler-rt/lib/builtins/assembly.h
--- llvm-project-13.0.0/compiler-rt/lib/builtins/assembly.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/builtins/assembly.h	2022-02-03 15:24:18.488479128 +0000
@@ -43,7 +43,7 @@
 #define CONST_SECTION .section .rodata
 
 #if defined(__GNU__) || defined(__FreeBSD__) || defined(__Fuchsia__) ||        \
-    defined(__linux__)
+    defined(__linux__) || defined(__onyx__)
 #define NO_EXEC_STACK_DIRECTIVE .section .note.GNU-stack,"",%progbits
 #else
 #define NO_EXEC_STACK_DIRECTIVE
diff -Naur llvm-project-13.0.0/compiler-rt/lib/fuzzer/afl/afl_driver.cpp llvm-project-13.0.0-patched/compiler-rt/lib/fuzzer/afl/afl_driver.cpp
--- llvm-project-13.0.0/compiler-rt/lib/fuzzer/afl/afl_driver.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/fuzzer/afl/afl_driver.cpp	2022-02-03 15:24:18.488479128 +0000
@@ -60,21 +60,31 @@
 #define LIBFUZZER_APPLE 0
 #define LIBFUZZER_NETBSD 0
 #define LIBFUZZER_FREEBSD 0
+#define LIBFUZZER_ONYX 0
 #elif __APPLE__
 #define LIBFUZZER_LINUX 0
 #define LIBFUZZER_APPLE 1
 #define LIBFUZZER_NETBSD 0
 #define LIBFUZZER_FREEBSD 0
+#define LIBFUZZER_ONYX 0
 #elif __NetBSD__
 #define LIBFUZZER_LINUX 0
 #define LIBFUZZER_APPLE 0
 #define LIBFUZZER_NETBSD 1
 #define LIBFUZZER_FREEBSD 0
+#define LIBFUZZER_ONYX 0
 #elif __FreeBSD__
 #define LIBFUZZER_LINUX 0
 #define LIBFUZZER_APPLE 0
 #define LIBFUZZER_NETBSD 0
 #define LIBFUZZER_FREEBSD 1
+#define LIBFUZZER_ONYX 0
+#elif __onyx__
+#define LIBFUZZER_LINUX 0
+#define LIBFUZZER_APPLE 0
+#define LIBFUZZER_NETBSD 0
+#define LIBFUZZER_FREEBSD 0
+#define LIBFUZZER_ONYX 1
 #else
 #error "Support for your platform has not been implemented"
 #endif
diff -Naur llvm-project-13.0.0/compiler-rt/lib/fuzzer/FuzzerPlatform.h llvm-project-13.0.0-patched/compiler-rt/lib/fuzzer/FuzzerPlatform.h
--- llvm-project-13.0.0/compiler-rt/lib/fuzzer/FuzzerPlatform.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/fuzzer/FuzzerPlatform.h	2022-02-03 15:24:18.488479128 +0000
@@ -20,6 +20,7 @@
 #define LIBFUZZER_FREEBSD 0
 #define LIBFUZZER_WINDOWS 0
 #define LIBFUZZER_EMSCRIPTEN 0
+#define LIBFUZZER_ONYX 0
 #elif __APPLE__
 #define LIBFUZZER_APPLE 1
 #define LIBFUZZER_FUCHSIA 0
@@ -28,6 +29,7 @@
 #define LIBFUZZER_FREEBSD 0
 #define LIBFUZZER_WINDOWS 0
 #define LIBFUZZER_EMSCRIPTEN 0
+#define LIBFUZZER_ONYX 0
 #elif __NetBSD__
 #define LIBFUZZER_APPLE 0
 #define LIBFUZZER_FUCHSIA 0
@@ -36,6 +38,7 @@
 #define LIBFUZZER_FREEBSD 0
 #define LIBFUZZER_WINDOWS 0
 #define LIBFUZZER_EMSCRIPTEN 0
+#define LIBFUZZER_ONYX 0
 #elif __FreeBSD__
 #define LIBFUZZER_APPLE 0
 #define LIBFUZZER_FUCHSIA 0
@@ -44,6 +47,7 @@
 #define LIBFUZZER_FREEBSD 1
 #define LIBFUZZER_WINDOWS 0
 #define LIBFUZZER_EMSCRIPTEN 0
+#define LIBFUZZER_ONYX 0
 #elif _WIN32
 #define LIBFUZZER_APPLE 0
 #define LIBFUZZER_FUCHSIA 0
@@ -52,6 +56,7 @@
 #define LIBFUZZER_FREEBSD 0
 #define LIBFUZZER_WINDOWS 1
 #define LIBFUZZER_EMSCRIPTEN 0
+#define LIBFUZZER_ONYX 0
 #elif __Fuchsia__
 #define LIBFUZZER_APPLE 0
 #define LIBFUZZER_FUCHSIA 1
@@ -60,6 +65,7 @@
 #define LIBFUZZER_FREEBSD 0
 #define LIBFUZZER_WINDOWS 0
 #define LIBFUZZER_EMSCRIPTEN 0
+#define LIBFUZZER_ONYX 0
 #elif __EMSCRIPTEN__
 #define LIBFUZZER_APPLE 0
 #define LIBFUZZER_FUCHSIA 0
@@ -68,6 +74,16 @@
 #define LIBFUZZER_FREEBSD 0
 #define LIBFUZZER_WINDOWS 0
 #define LIBFUZZER_EMSCRIPTEN 1
+#define LIBFUZZER_ONYX 0
+#elif __onyx__
+#define LIBFUZZER_APPLE 0
+#define LIBFUZZER_FUCHSIA 0
+#define LIBFUZZER_LINUX 0
+#define LIBFUZZER_NETBSD 0
+#define LIBFUZZER_FREEBSD 0
+#define LIBFUZZER_WINDOWS 0
+#define LIBFUZZER_EMSCRIPTEN 0
+#define LIBFUZZER_ONYX 1
 #else
 #error "Support for your platform has not been implemented"
 #endif
@@ -85,7 +101,7 @@
 
 #define LIBFUZZER_POSIX                                                        \
   (LIBFUZZER_APPLE || LIBFUZZER_LINUX || LIBFUZZER_NETBSD ||                   \
-   LIBFUZZER_FREEBSD || LIBFUZZER_EMSCRIPTEN)
+   LIBFUZZER_FREEBSD || LIBFUZZER_EMSCRIPTEN || LIBFUZZER_ONYX)
 
 #ifdef __x86_64
 #if __has_attribute(target)
diff -Naur llvm-project-13.0.0/compiler-rt/lib/fuzzer/FuzzerUtilLinux.cpp llvm-project-13.0.0-patched/compiler-rt/lib/fuzzer/FuzzerUtilLinux.cpp
--- llvm-project-13.0.0/compiler-rt/lib/fuzzer/FuzzerUtilLinux.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/fuzzer/FuzzerUtilLinux.cpp	2022-02-03 15:24:18.488479128 +0000
@@ -9,7 +9,7 @@
 //===----------------------------------------------------------------------===//
 #include "FuzzerPlatform.h"
 #if LIBFUZZER_LINUX || LIBFUZZER_NETBSD || LIBFUZZER_FREEBSD ||                \
-    LIBFUZZER_EMSCRIPTEN
+    LIBFUZZER_EMSCRIPTEN || LIBFUZZER_ONYX
 #include "FuzzerCommand.h"
 
 #include <stdlib.h>
diff -Naur llvm-project-13.0.0/compiler-rt/lib/fuzzer/FuzzerUtilPosix.cpp llvm-project-13.0.0-patched/compiler-rt/lib/fuzzer/FuzzerUtilPosix.cpp
--- llvm-project-13.0.0/compiler-rt/lib/fuzzer/FuzzerUtilPosix.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/fuzzer/FuzzerUtilPosix.cpp	2022-02-03 15:24:18.488479128 +0000
@@ -151,7 +151,7 @@
   if (getrusage(RUSAGE_SELF, &usage))
     return 0;
   if (LIBFUZZER_LINUX || LIBFUZZER_FREEBSD || LIBFUZZER_NETBSD ||
-      LIBFUZZER_EMSCRIPTEN) {
+      LIBFUZZER_EMSCRIPTEN || LIBFUZZER_ONYX) {
     // ru_maxrss is in KiB
     return usage.ru_maxrss >> 10;
   } else if (LIBFUZZER_APPLE) {
diff -Naur llvm-project-13.0.0/compiler-rt/lib/interception/interception.h llvm-project-13.0.0-patched/compiler-rt/lib/interception/interception.h
--- llvm-project-13.0.0/compiler-rt/lib/interception/interception.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/interception/interception.h	2022-02-03 15:24:18.488479128 +0000
@@ -18,7 +18,7 @@
 
 #if !SANITIZER_LINUX && !SANITIZER_FREEBSD && !SANITIZER_MAC &&      \
     !SANITIZER_NETBSD && !SANITIZER_WINDOWS && !SANITIZER_FUCHSIA && \
-    !SANITIZER_SOLARIS
+    !SANITIZER_SOLARIS && !SANITIZER_ONYX
 #  error "Interception doesn't work on this operating system."
 #endif
 
@@ -272,7 +272,7 @@
 #define INCLUDED_FROM_INTERCEPTION_LIB
 
 #if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 
 # include "interception_linux.h"
 # define INTERCEPT_FUNCTION(func) INTERCEPT_FUNCTION_LINUX_OR_FREEBSD(func)
diff -Naur llvm-project-13.0.0/compiler-rt/lib/interception/interception_linux.cpp llvm-project-13.0.0-patched/compiler-rt/lib/interception/interception_linux.cpp
--- llvm-project-13.0.0/compiler-rt/lib/interception/interception_linux.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/interception/interception_linux.cpp	2022-02-03 15:24:18.488479128 +0000
@@ -14,7 +14,7 @@
 #include "interception.h"
 
 #if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 
 #include <dlfcn.h>   // for dlsym() and dlvsym()
 
@@ -80,4 +80,4 @@
 }  // namespace __interception
 
 #endif  // SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD ||
-        // SANITIZER_SOLARIS
+        // SANITIZER_SOLARIS || SANITIZER_ONYX
diff -Naur llvm-project-13.0.0/compiler-rt/lib/interception/interception_linux.h llvm-project-13.0.0-patched/compiler-rt/lib/interception/interception_linux.h
--- llvm-project-13.0.0/compiler-rt/lib/interception/interception_linux.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/interception/interception_linux.h	2022-02-03 15:24:18.488479128 +0000
@@ -12,7 +12,7 @@
 //===----------------------------------------------------------------------===//
 
 #if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 
 #if !defined(INCLUDED_FROM_INTERCEPTION_LIB)
 # error "interception_linux.h should be included from interception library only"
diff -Naur llvm-project-13.0.0/compiler-rt/lib/lsan/lsan_common.h llvm-project-13.0.0-patched/compiler-rt/lib/lsan/lsan_common.h
--- llvm-project-13.0.0/compiler-rt/lib/lsan/lsan_common.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/lsan/lsan_common.h	2022-02-03 15:24:18.488479128 +0000
@@ -43,7 +43,7 @@
 #define CAN_SANITIZE_LEAKS 1
 #elif SANITIZER_RISCV64 && SANITIZER_LINUX
 #define CAN_SANITIZE_LEAKS 1
-#elif SANITIZER_NETBSD || SANITIZER_FUCHSIA
+#elif SANITIZER_NETBSD || SANITIZER_FUCHSIA || SANITIZER_ONYX
 #define CAN_SANITIZE_LEAKS 1
 #else
 #define CAN_SANITIZE_LEAKS 0
diff -Naur llvm-project-13.0.0/compiler-rt/lib/lsan/lsan_common_linux.cpp llvm-project-13.0.0-patched/compiler-rt/lib/lsan/lsan_common_linux.cpp
--- llvm-project-13.0.0/compiler-rt/lib/lsan/lsan_common_linux.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/lsan/lsan_common_linux.cpp	2022-02-03 15:24:18.491812511 +0000
@@ -15,7 +15,7 @@
 #include "sanitizer_common/sanitizer_platform.h"
 #include "lsan_common.h"
 
-#if CAN_SANITIZE_LEAKS && (SANITIZER_LINUX || SANITIZER_NETBSD)
+#if CAN_SANITIZE_LEAKS && (SANITIZER_LINUX || SANITIZER_NETBSD || SANITIZER_ONYX)
 #include <link.h>
 
 #include "sanitizer_common/sanitizer_common.h"
diff -Naur llvm-project-13.0.0/compiler-rt/lib/lsan/lsan_linux.cpp llvm-project-13.0.0-patched/compiler-rt/lib/lsan/lsan_linux.cpp
--- llvm-project-13.0.0/compiler-rt/lib/lsan/lsan_linux.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/lsan/lsan_linux.cpp	2022-02-03 15:24:18.491812511 +0000
@@ -12,7 +12,7 @@
 
 #include "sanitizer_common/sanitizer_platform.h"
 
-#if SANITIZER_LINUX || SANITIZER_NETBSD || SANITIZER_FUCHSIA
+#if SANITIZER_LINUX || SANITIZER_NETBSD || SANITIZER_FUCHSIA || SANITIZER_ONYX
 
 #include "lsan_allocator.h"
 
diff -Naur llvm-project-13.0.0/compiler-rt/lib/msan/msan.h llvm-project-13.0.0-patched/compiler-rt/lib/msan/msan.h
--- llvm-project-13.0.0/compiler-rt/lib/msan/msan.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/msan/msan.h	2022-02-03 15:24:18.491812511 +0000
@@ -216,7 +216,9 @@
 #define MEM_TO_SHADOW(mem) (LINEARIZE_MEM((mem)) + 0x100000000000ULL)
 #define SHADOW_TO_ORIGIN(shadow) (((uptr)(shadow)) + 0x280000000000)
 
-#elif SANITIZER_NETBSD || (SANITIZER_LINUX && SANITIZER_WORDSIZE == 64)
+#elif SANITIZER_NETBSD || (SANITIZER_LINUX && SANITIZER_WORDSIZE == 64) || SANITIZER_ONYX
+
+//TODO: How would Onyx implement this correctly?
 
 #ifdef MSAN_LINUX_X86_64_OLD_MAPPING
 // Requries PIE binary and ASLR enabled.
diff -Naur llvm-project-13.0.0/compiler-rt/lib/msan/msan_interceptors.cpp llvm-project-13.0.0-patched/compiler-rt/lib/msan/msan_interceptors.cpp
--- llvm-project-13.0.0/compiler-rt/lib/msan/msan_interceptors.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/msan/msan_interceptors.cpp	2022-02-03 15:24:18.491812511 +0000
@@ -837,7 +837,7 @@
   return res;
 }
 
-#if !SANITIZER_FREEBSD && !SANITIZER_NETBSD
+#if !SANITIZER_FREEBSD && !SANITIZER_NETBSD && !SANITIZER_ONYX
 INTERCEPTOR(int, epoll_wait, int epfd, void *events, int maxevents,
     int timeout) {
   ENSURE_MSAN_INITED();
@@ -852,7 +852,7 @@
 #define MSAN_MAYBE_INTERCEPT_EPOLL_WAIT
 #endif
 
-#if !SANITIZER_FREEBSD && !SANITIZER_NETBSD
+#if !SANITIZER_FREEBSD && !SANITIZER_NETBSD && !SANITIZER_ONYX
 INTERCEPTOR(int, epoll_pwait, int epfd, void *events, int maxevents,
     int timeout, void *sigmask) {
   ENSURE_MSAN_INITED();
@@ -1490,6 +1490,10 @@
   return cbdata->callback(info, size, cbdata->data);
 }
 
+#if !SANITIZER_ONYX
+
+// HACK: This should compile
+
 INTERCEPTOR(void *, shmat, int shmid, const void *shmaddr, int shmflg) {
   ENSURE_MSAN_INITED();
   void *p = REAL(shmat)(shmid, shmaddr, shmflg);
@@ -1503,6 +1507,8 @@
   return p;
 }
 
+#endif
+
 INTERCEPTOR(int, dl_iterate_phdr, dl_iterate_phdr_cb callback, void *data) {
   void *ctx;
   COMMON_INTERCEPTOR_ENTER(ctx, dl_iterate_phdr, callback, data);
@@ -1720,7 +1726,11 @@
   INTERCEPT_FUNCTION(tzset);
   INTERCEPT_FUNCTION(atexit);
   INTERCEPT_FUNCTION(__cxa_atexit);
+
+#if !SANITIZER_ONYX
   INTERCEPT_FUNCTION(shmat);
+#endif
+
   INTERCEPT_FUNCTION(fork);
   MSAN_MAYBE_INTERCEPT_OPENPTY;
   MSAN_MAYBE_INTERCEPT_FORKPTY;
diff -Naur llvm-project-13.0.0/compiler-rt/lib/msan/msan_linux.cpp llvm-project-13.0.0-patched/compiler-rt/lib/msan/msan_linux.cpp
--- llvm-project-13.0.0/compiler-rt/lib/msan/msan_linux.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/msan/msan_linux.cpp	2022-02-03 15:24:18.491812511 +0000
@@ -12,7 +12,7 @@
 //===----------------------------------------------------------------------===//
 
 #include "sanitizer_common/sanitizer_platform.h"
-#if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD
+#if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD || SANITIZER_ONYX
 
 #include "msan.h"
 #include "msan_report.h"
diff -Naur llvm-project-13.0.0/compiler-rt/lib/orc/endianness.h llvm-project-13.0.0-patched/compiler-rt/lib/orc/endianness.h
--- llvm-project-13.0.0/compiler-rt/lib/orc/endianness.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/orc/endianness.h	2022-02-03 15:24:18.491812511 +0000
@@ -22,7 +22,7 @@
 #endif
 
 #if defined(__linux__) || defined(__GNU__) || defined(__HAIKU__) ||            \
-    defined(__Fuchsia__) || defined(__EMSCRIPTEN__)
+    defined(__Fuchsia__) || defined(__EMSCRIPTEN__) || defined(__onyx__)
 #include <endian.h>
 #elif defined(_AIX)
 #include <sys/machine.h>
diff -Naur llvm-project-13.0.0/compiler-rt/lib/safestack/safestack_platform.h llvm-project-13.0.0-patched/compiler-rt/lib/safestack/safestack_platform.h
--- llvm-project-13.0.0/compiler-rt/lib/safestack/safestack_platform.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/safestack/safestack_platform.h	2022-02-03 15:24:18.491812511 +0000
@@ -25,7 +25,7 @@
 #include <sys/types.h>
 #include <unistd.h>
 
-#if !(SANITIZER_NETBSD || SANITIZER_FREEBSD || SANITIZER_LINUX)
+#if !(SANITIZER_NETBSD || SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_ONYX)
 #error "Support for your platform has not been implemented"
 #endif
 
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/CMakeLists.txt llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/CMakeLists.txt
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/CMakeLists.txt	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/CMakeLists.txt	2022-02-03 15:24:18.495145894 +0000
@@ -31,6 +31,7 @@
   sanitizer_procmaps_fuchsia.cpp
   sanitizer_procmaps_linux.cpp
   sanitizer_procmaps_mac.cpp
+  sanitizer_procmaps_onyx.cpp
   sanitizer_procmaps_solaris.cpp
   sanitizer_solaris.cpp
   sanitizer_stoptheworld_fuchsia.cpp
@@ -61,6 +62,7 @@
   sanitizer_mac_libcdep.cpp
   sanitizer_posix_libcdep.cpp
   sanitizer_stoptheworld_linux_libcdep.cpp
+  sanitizer_stoptheworld_onyx.cpp
   sanitizer_stoptheworld_netbsd_libcdep.cpp
   )
 
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_errno_codes.h llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_errno_codes.h
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_errno_codes.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_errno_codes.h	2022-02-03 15:24:18.495145894 +0000
@@ -24,6 +24,7 @@
 #define errno_ENOMEM 12
 #define errno_EBUSY 16
 #define errno_EINVAL 22
+#define errno_ENOSPC 28
 #define errno_ENAMETOOLONG 36
 
 // Those might not present or their value differ on different platforms.
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_glibc_version.h llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_glibc_version.h
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_glibc_version.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_glibc_version.h	2022-02-03 15:24:18.495145894 +0000
@@ -15,7 +15,7 @@
 
 #include "sanitizer_platform.h"
 
-#if SANITIZER_LINUX || SANITIZER_FUCHSIA
+#if SANITIZER_LINUX || SANITIZER_FUCHSIA || SANITIZER_ONYX
 #include <features.h>
 #endif
 
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_internal_defs.h llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_internal_defs.h
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_internal_defs.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_internal_defs.h	2022-02-03 15:24:18.495145894 +0000
@@ -39,7 +39,7 @@
 
 // TLS is handled differently on different platforms
 #if SANITIZER_LINUX || SANITIZER_NETBSD || \
-  SANITIZER_FREEBSD
+  SANITIZER_FREEBSD || SANITIZER_ONYX
 # define SANITIZER_TLS_INITIAL_EXEC_ATTRIBUTE \
     __attribute__((tls_model("initial-exec"))) thread_local
 #else
@@ -169,7 +169,7 @@
 #endif
 
 #if SANITIZER_FREEBSD || SANITIZER_NETBSD || \
-    SANITIZER_MAC || \
+    SANITIZER_MAC || (SANITIZER_ONYX && defined(__x86_64__)) || \
     (SANITIZER_SOLARIS && (defined(_LP64) || _FILE_OFFSET_BITS == 64)) || \
     (SANITIZER_LINUX && defined(__x86_64__))
 typedef u64 OFF_T;
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_linux.cpp llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_linux.cpp
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_linux.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_linux.cpp	2022-02-03 15:24:18.495145894 +0000
@@ -14,7 +14,7 @@
 #include "sanitizer_platform.h"
 
 #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 
 #include "sanitizer_common.h"
 #include "sanitizer_flags.h"
@@ -103,6 +103,12 @@
 #define environ _environ
 #endif
 
+#if SANITIZER_ONYX
+
+#include <onyx/public/handle.h>
+#include <onyx/public/process.h>
+
+#endif
 extern char **environ;
 
 #if SANITIZER_LINUX
@@ -112,13 +118,18 @@
   long tv_usec;
 };
 
+#endif  // SANITIZER_LINUX
+
+#if SANITIZER_LINUX || SANITIZER_ONYX
+
 // <linux/futex.h> is broken on some linux distributions.
 const int FUTEX_WAIT = 0;
 const int FUTEX_WAKE = 1;
 const int FUTEX_PRIVATE_FLAG = 128;
 const int FUTEX_WAIT_PRIVATE = FUTEX_WAIT | FUTEX_PRIVATE_FLAG;
 const int FUTEX_WAKE_PRIVATE = FUTEX_WAKE | FUTEX_PRIVATE_FLAG;
-#endif  // SANITIZER_LINUX
+
+#endif // SANITIZER_LINUX || SANITIZER_ONYX
 
 // Are we using 32-bit or 64-bit Linux syscalls?
 // x32 (which defines __x86_64__) has SANITIZER_WORDSIZE == 32
@@ -167,7 +178,7 @@
 #if !SANITIZER_S390
 uptr internal_mmap(void *addr, uptr length, int prot, int flags, int fd,
                    u64 offset) {
-#if SANITIZER_FREEBSD || SANITIZER_LINUX_USES_64BIT_SYSCALLS
+#if SANITIZER_FREEBSD || SANITIZER_LINUX_USES_64BIT_SYSCALLS || SANITIZER_ONYX
   return internal_syscall(SYSCALL(mmap), (uptr)addr, length, prot, flags, fd,
                           offset);
 #else
@@ -311,7 +322,7 @@
 #endif
 
 uptr internal_stat(const char *path, void *buf) {
-#if SANITIZER_FREEBSD
+#if SANITIZER_FREEBSD || SANITIZER_ONYX
   return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path, (uptr)buf, 0);
 #elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
   return internal_syscall(SYSCALL(newfstatat), AT_FDCWD, (uptr)path, (uptr)buf,
@@ -335,7 +346,7 @@
 }
 
 uptr internal_lstat(const char *path, void *buf) {
-#if SANITIZER_FREEBSD
+#if SANITIZER_FREEBSD || SANITIZER_ONYX
   return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path, (uptr)buf,
                           AT_SYMLINK_NOFOLLOW);
 #elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
@@ -360,7 +371,7 @@
 }
 
 uptr internal_fstat(fd_t fd, void *buf) {
-#if SANITIZER_FREEBSD || SANITIZER_LINUX_USES_64BIT_SYSCALLS
+#if SANITIZER_FREEBSD || SANITIZER_LINUX_USES_64BIT_SYSCALLS || SANITIZER_ONYX
 #if SANITIZER_MIPS64
   // For mips64, fstat syscall fills buffer in the format of kernel_stat
   struct kernel_stat kbuf;
@@ -484,7 +495,7 @@
 }
 
 int TgKill(pid_t pid, tid_t tid, int sig) {
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
   return internal_syscall(SYSCALL(tgkill), pid, tid, sig);
 #elif SANITIZER_FREEBSD
   return internal_syscall(SYSCALL(thr_kill2), pid, tid, sig);
@@ -518,7 +529,7 @@
 // 'environ' array (on some others) and does not use libc. This function
 // should be called first inside __asan_init.
 const char *GetEnv(const char *name) {
-#if SANITIZER_FREEBSD || SANITIZER_NETBSD || SANITIZER_SOLARIS
+#if SANITIZER_FREEBSD || SANITIZER_NETBSD || SANITIZER_SOLARIS || SANITIZER_ONYX
   if (::environ != 0) {
     uptr NameLen = internal_strlen(name);
     for (char **Env = ::environ; *Env != 0; Env++) {
@@ -786,6 +797,27 @@
 #endif
 }
 
+#if SANITIZER_ONYX
+
+int internal_onx_handle_open(unsigned int resource_type, unsigned long id, int flags)
+{
+	return internal_syscall(SYSCALL(onx_handle_open), resource_type, id, flags);
+}
+
+void internal_onx_handle_close(int handle)
+{
+	internal_close(handle);
+}
+
+ssize_t internal_onx_handle_query(int handle, void *buffer, ssize_t len, unsigned long what, size_t *howmany,
+                                        void *arg)
+{
+	return internal_syscall(SYSCALL(onx_handle_query), handle, buffer, len, what, howmany, arg);
+}
+
+#endif
+
+
 #if SANITIZER_FREEBSD
 int internal_sysctl(const int *name, unsigned int namelen, void *oldp,
                     uptr *oldlenp, const void *newp, uptr newlen) {
@@ -1130,6 +1162,28 @@
       (internal_sysctl(Mib, ARRAY_SIZE(Mib), buf, &Size, NULL, 0) != 0);
   int readlink_error = IsErr ? errno : 0;
   uptr module_name_len = Size;
+#elif SANITIZER_ONYX
+  int readlink_error = EINVAL;
+  const char *default_module_name = "<executable>";
+  uptr module_name_len = 0;
+  bool IsErr = false;
+
+  int handle = internal_onx_handle_open(ONX_HANDLE_TYPE_PROCESS, internal_getpid(), ONX_HANDLE_CLOEXEC);
+  if (handle < 0) {
+    IsErr = true;
+  } else {
+    module_name_len = internal_onx_handle_query(handle, buf, buf_len, PROCESS_GET_PATH, nullptr, nullptr);
+    
+    if (module_name_len == -1) {
+      IsErr = true;
+    }
+
+    module_name_len--;
+  
+    internal_onx_handle_close(handle);
+  }
+
+  readlink_error = IsErr ? errno : 0;
 #else
   const char *default_module_name = "/proc/self/exe";
   uptr module_name_len = internal_readlink(
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_linux.h llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_linux.h
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_linux.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_linux.h	2022-02-03 15:24:18.498479277 +0000
@@ -14,7 +14,7 @@
 
 #include "sanitizer_platform.h"
 #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD ||                \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 #include "sanitizer_common.h"
 #include "sanitizer_internal_defs.h"
 #include "sanitizer_platform_limits_freebsd.h"
@@ -31,6 +31,7 @@
 // the one in <dirent.h>, which is used by readdir().
 struct linux_dirent;
 
+#if !SANITIZER_ONYX
 struct ProcSelfMapsBuff {
   char *data;
   uptr mmaped_size;
@@ -44,6 +45,8 @@
 
 void ReadProcMaps(ProcSelfMapsBuff *proc_maps);
 
+#endif
+
 // Syscall wrappers.
 uptr internal_getdents(fd_t fd, struct linux_dirent *dirp, unsigned int count);
 uptr internal_sigaltstack(const void* ss, void* oss);
@@ -53,6 +56,13 @@
 uptr internal_clock_gettime(__sanitizer_clockid_t clk_id, void *tp);
 #endif
 
+#if SANITIZER_ONYX
+int internal_onx_handle_open(unsigned int resource_type, uptr id, int flags);
+void internal_onx_handle_close(int handle);
+sptr internal_onx_handle_query(int handle, void *buffer, sptr len, uptr what, uptr *howmany,
+                               void *arg);
+#endif
+
 // Linux-only syscalls.
 #if SANITIZER_LINUX
 uptr internal_prctl(int option, uptr arg2, uptr arg3, uptr arg4, uptr arg5);
@@ -73,6 +83,10 @@
 #elif SANITIZER_NETBSD
 void internal_sigdelset(__sanitizer_sigset_t *set, int signum);
 uptr internal_clone(int (*fn)(void *), void *child_stack, int flags, void *arg);
+#elif SANITIZER_ONYX
+int internal_sigaction_norestorer(int signum, const void *act, void *oldact);
+// TODO: Add our own clone thingy
+void internal_sigdelset(__sanitizer_sigset_t *set, int signum);
 #endif  // SANITIZER_LINUX
 
 // This class reads thread IDs from /proc/<pid>/task using only syscalls.
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_linux_libcdep.cpp llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_linux_libcdep.cpp
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_linux_libcdep.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_linux_libcdep.cpp	2022-02-03 15:24:18.498479277 +0000
@@ -14,7 +14,7 @@
 #include "sanitizer_platform.h"
 
 #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 
 #include "sanitizer_allocator_internal.h"
 #include "sanitizer_atomic.h"
@@ -216,7 +216,7 @@
 // On glibc x86_64, ThreadDescriptorSize() needs to be precise due to the usage
 // of g_tls_size. On other targets, ThreadDescriptorSize() is only used by lsan
 // to get the pointer to thread-specific data keys in the thread control block.
-#if (SANITIZER_FREEBSD || SANITIZER_LINUX) && !SANITIZER_ANDROID
+#if (SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 // sizeof(struct pthread) from glibc.
 static atomic_uintptr_t thread_descriptor_size;
 
@@ -467,7 +467,7 @@
   const uptr pre_tcb_size = TlsPreTcbSize();
   *addr = tp - pre_tcb_size;
   *size = g_tls_size + pre_tcb_size;
-#elif SANITIZER_FREEBSD || SANITIZER_LINUX
+#elif SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_ONYX
   uptr align;
   GetStaticTlsBoundary(addr, size, &align);
 #if defined(__x86_64__) || defined(__i386__) || defined(__s390__) || \
@@ -541,7 +541,7 @@
 #if !SANITIZER_GO
 uptr GetTlsSize() {
 #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
   uptr addr, size;
   GetTls(&addr, &size);
   return size;
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_onyx.h llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_onyx.h
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_onyx.h	1970-01-01 01:00:00.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_onyx.h	2022-02-03 15:24:18.498479277 +0000
@@ -0,0 +1,33 @@
+//===-- sanitizer_onyx.h ------------------------------------*- C++ -*-===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===---------------------------------------------------------------------===//
+//
+// Onyx-specific sanitizer support.
+//
+//===---------------------------------------------------------------------===//
+#ifndef SANITIZER_ONYX_H
+#define SANITIZER_ONYX_H
+
+#include "sanitizer_platform.h"
+#if SANITIZER_ONYX
+
+#include "sanitizer_common.h"
+
+#include <onyx/public/process.h>
+
+namespace __sanitizer {
+
+struct MemoryMappingLayoutData {
+  InternalMmapVector<char> data;
+  size_t current;  // Current offset into the vector.
+};
+
+}
+
+#endif
+
+#endif
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_platform.h llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_platform.h
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_platform.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_platform.h	2022-02-03 15:24:18.498479277 +0000
@@ -14,7 +14,7 @@
 
 #if !defined(__linux__) && !defined(__FreeBSD__) && !defined(__NetBSD__) && \
     !defined(__APPLE__) && !defined(_WIN32) && !defined(__Fuchsia__) &&     \
-    !(defined(__sun__) && defined(__svr4__))
+    !(defined(__sun__) && defined(__svr4__)) && !defined(__onyx__)
 #  error "This operating system is not supported"
 #endif
 
@@ -116,9 +116,15 @@
 # define SANITIZER_FUCHSIA 0
 #endif
 
+#if defined(__onyx__)
+# define SANITIZER_ONYX 1
+#else
+# define SANITIZER_ONYX 0
+#endif
+
 #define SANITIZER_POSIX \
   (SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_MAC || \
-    SANITIZER_NETBSD || SANITIZER_SOLARIS)
+    SANITIZER_NETBSD || SANITIZER_SOLARIS || SANITIZER_ONYX)
 
 #if __LP64__ || defined(_WIN64)
 #  define SANITIZER_WORDSIZE 64
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_platform_interceptors.h llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_platform_interceptors.h
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_platform_interceptors.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_platform_interceptors.h	2022-02-03 15:24:18.498479277 +0000
@@ -138,6 +138,12 @@
 #define SI_LINUX_NOT_FREEBSD 0
 #endif
 
+#if SANITIZER_ONYX
+# define SI_ONYX 1
+#else
+# define SI_ONYX 0
+#endif
+
 #define SANITIZER_INTERCEPT_STRLEN SI_NOT_FUCHSIA
 #define SANITIZER_INTERCEPT_STRNLEN (SI_NOT_MAC && SI_NOT_FUCHSIA)
 #define SANITIZER_INTERCEPT_STRCMP SI_NOT_FUCHSIA
@@ -149,7 +155,7 @@
 #define SANITIZER_INTERCEPT_STRRCHR SI_NOT_FUCHSIA
 #define SANITIZER_INTERCEPT_STRSPN SI_NOT_FUCHSIA
 #define SANITIZER_INTERCEPT_STRPBRK SI_NOT_FUCHSIA
-#define SANITIZER_INTERCEPT_TEXTDOMAIN SI_LINUX_NOT_ANDROID || SI_SOLARIS
+#define SANITIZER_INTERCEPT_TEXTDOMAIN (SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_SOLARIS
 #define SANITIZER_INTERCEPT_STRCASECMP SI_POSIX
 #define SANITIZER_INTERCEPT_MEMSET 1
 #define SANITIZER_INTERCEPT_MEMMOVE 1
@@ -170,7 +176,7 @@
 // FIXME: enable memmem on Windows.
 #define SANITIZER_INTERCEPT_MEMMEM (SI_POSIX && !SI_MAC_DEPLOYMENT_BELOW_10_7)
 #define SANITIZER_INTERCEPT_MEMCHR SI_NOT_FUCHSIA
-#define SANITIZER_INTERCEPT_MEMRCHR (SI_FREEBSD || SI_LINUX || SI_NETBSD)
+#define SANITIZER_INTERCEPT_MEMRCHR (SI_FREEBSD || SI_LINUX || SI_ONYX || SI_NETBSD)
 
 #define SANITIZER_INTERCEPT_READ SI_POSIX
 #define SANITIZER_INTERCEPT_PREAD SI_POSIX
@@ -190,8 +196,8 @@
 #define SANITIZER_INTERCEPT_WRITEV SI_POSIX
 
 #define SANITIZER_INTERCEPT_PREADV \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID)
-#define SANITIZER_INTERCEPT_PWRITEV SI_LINUX_NOT_ANDROID
+  (SI_FREEBSD || SI_NETBSD || (SI_LINUX_NOT_ANDROID || SI_ONYX))
+#define SANITIZER_INTERCEPT_PWRITEV (SI_LINUX_NOT_ANDROID || SI_ONYX)
 #define SANITIZER_INTERCEPT_PREADV64 SI_GLIBC
 #define SANITIZER_INTERCEPT_PWRITEV64 SI_GLIBC
 
@@ -217,19 +223,19 @@
 
 #define SANITIZER_INTERCEPT_GETPWNAM_AND_FRIENDS SI_POSIX
 #define SANITIZER_INTERCEPT_GETPWNAM_R_AND_FRIENDS \
-  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_MAC || (SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_GETPWENT \
-  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_MAC || (SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_FGETGRENT_R (SI_GLIBC || SI_SOLARIS)
-#define SANITIZER_INTERCEPT_FGETPWENT SI_LINUX_NOT_ANDROID || SI_SOLARIS
+#define SANITIZER_INTERCEPT_FGETPWENT (SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_SOLARIS
 #define SANITIZER_INTERCEPT_GETPWENT_R \
   (SI_FREEBSD || SI_NETBSD || SI_GLIBC || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_FGETPWENT_R (SI_FREEBSD || SI_GLIBC || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_SETPWENT \
-  (SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_MAC || (SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_CLOCK_GETTIME \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX || SI_SOLARIS)
-#define SANITIZER_INTERCEPT_CLOCK_GETCPUCLOCKID SI_LINUX
+  (SI_FREEBSD || SI_NETBSD || SI_LINUX || SI_ONYX || SI_SOLARIS)
+#define SANITIZER_INTERCEPT_CLOCK_GETCPUCLOCKID SI_LINUX || SI_ONYX
 #define SANITIZER_INTERCEPT_GETITIMER SI_POSIX
 #define SANITIZER_INTERCEPT_TIME SI_POSIX
 #define SANITIZER_INTERCEPT_GLOB (SI_GLIBC || SI_SOLARIS)
@@ -243,28 +249,28 @@
 #define SANITIZER_INTERCEPT_GETHOSTBYNAME SI_POSIX
 #define SANITIZER_INTERCEPT_GETHOSTBYNAME2 SI_POSIX && !SI_SOLARIS
 #define SANITIZER_INTERCEPT_GETHOSTBYNAME_R \
-  (SI_FREEBSD || SI_LINUX || SI_SOLARIS)
+  (SI_FREEBSD || SI_LINUX || SI_ONYX || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_GETHOSTBYNAME2_R \
-  (SI_FREEBSD || SI_LINUX_NOT_ANDROID)
+  (SI_FREEBSD || SI_LINUX_NOT_ANDROID || SI_ONYX)
 #define SANITIZER_INTERCEPT_GETHOSTBYADDR_R \
-  (SI_FREEBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_FREEBSD || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_GETHOSTENT_R (SI_FREEBSD || SI_GLIBC || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_GETSOCKOPT SI_POSIX
 #define SANITIZER_INTERCEPT_ACCEPT SI_POSIX
-#define SANITIZER_INTERCEPT_ACCEPT4 (SI_LINUX_NOT_ANDROID || SI_NETBSD)
+#define SANITIZER_INTERCEPT_ACCEPT4 (SI_LINUX_NOT_ANDROID || SI_ONYX || SI_NETBSD)
 #define SANITIZER_INTERCEPT_PACCEPT SI_NETBSD
 #define SANITIZER_INTERCEPT_MODF SI_POSIX
 #define SANITIZER_INTERCEPT_RECVMSG SI_POSIX
 #define SANITIZER_INTERCEPT_SENDMSG SI_POSIX
-#define SANITIZER_INTERCEPT_RECVMMSG SI_LINUX
-#define SANITIZER_INTERCEPT_SENDMMSG SI_LINUX
-#define SANITIZER_INTERCEPT_SYSMSG SI_LINUX_NOT_ANDROID
+#define SANITIZER_INTERCEPT_RECVMMSG SI_LINUX || SI_ONYX
+#define SANITIZER_INTERCEPT_SENDMMSG SI_LINUX || SI_ONYX
+#define SANITIZER_INTERCEPT_SYSMSG (SI_LINUX_NOT_ANDROID || SI_ONYX)
 #define SANITIZER_INTERCEPT_GETPEERNAME SI_POSIX
 #define SANITIZER_INTERCEPT_IOCTL SI_POSIX
 #define SANITIZER_INTERCEPT_INET_ATON SI_POSIX
 #define SANITIZER_INTERCEPT_SYSINFO SI_LINUX
 #define SANITIZER_INTERCEPT_READDIR SI_POSIX
-#define SANITIZER_INTERCEPT_READDIR64 SI_LINUX_NOT_ANDROID || SI_SOLARIS32
+#define SANITIZER_INTERCEPT_READDIR64 SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS32
 #if SI_LINUX_NOT_ANDROID &&                                                \
     (defined(__i386) || defined(__x86_64) || defined(__mips64) ||          \
      defined(__powerpc64__) || defined(__aarch64__) || defined(__arm__) || \
@@ -275,206 +281,206 @@
 #endif
 #define SANITIZER_INTERCEPT_SETLOCALE SI_POSIX
 #define SANITIZER_INTERCEPT_GETCWD SI_POSIX
-#define SANITIZER_INTERCEPT_GET_CURRENT_DIR_NAME SI_LINUX_NOT_ANDROID
+#define SANITIZER_INTERCEPT_GET_CURRENT_DIR_NAME (SI_LINUX_NOT_ANDROID || SI_ONYX)
 #define SANITIZER_INTERCEPT_STRTOIMAX SI_POSIX
 #define SANITIZER_INTERCEPT_MBSTOWCS SI_POSIX
 #define SANITIZER_INTERCEPT_MBSNRTOWCS \
-  (SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_MAC || (SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_WCSTOMBS SI_POSIX
 #define SANITIZER_INTERCEPT_STRXFRM SI_POSIX
-#define SANITIZER_INTERCEPT___STRXFRM_L SI_LINUX
+#define SANITIZER_INTERCEPT___STRXFRM_L SI_LINUX || SI_ONYX
 #define SANITIZER_INTERCEPT_WCSXFRM SI_POSIX
-#define SANITIZER_INTERCEPT___WCSXFRM_L SI_LINUX
+#define SANITIZER_INTERCEPT___WCSXFRM_L SI_LINUX || SI_ONYX
 #define SANITIZER_INTERCEPT_WCSNRTOMBS \
-  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_WCRTOMB \
-  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_WCTOMB \
-  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
-#define SANITIZER_INTERCEPT_TCGETATTR SI_LINUX_NOT_ANDROID || SI_SOLARIS
+  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS)
+#define SANITIZER_INTERCEPT_TCGETATTR SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS
 #define SANITIZER_INTERCEPT_REALPATH SI_POSIX
 #define SANITIZER_INTERCEPT_CANONICALIZE_FILE_NAME (SI_GLIBC || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_CONFSTR \
-  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
-#define SANITIZER_INTERCEPT_SCHED_GETAFFINITY SI_LINUX_NOT_ANDROID
-#define SANITIZER_INTERCEPT_SCHED_GETPARAM SI_LINUX_NOT_ANDROID || SI_SOLARIS
+  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS)
+#define SANITIZER_INTERCEPT_SCHED_GETAFFINITY SI_LINUX_NOT_ANDROID || SI_ONYX
+#define SANITIZER_INTERCEPT_SCHED_GETPARAM SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS
 #define SANITIZER_INTERCEPT_STRERROR SI_POSIX
 #define SANITIZER_INTERCEPT_STRERROR_R SI_POSIX
 #define SANITIZER_INTERCEPT_XPG_STRERROR_R SI_LINUX_NOT_ANDROID
 #define SANITIZER_INTERCEPT_SCANDIR \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
-#define SANITIZER_INTERCEPT_SCANDIR64 SI_LINUX_NOT_ANDROID || SI_SOLARIS32
+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS)
+#define SANITIZER_INTERCEPT_SCANDIR64 SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS32
 #define SANITIZER_INTERCEPT_GETGROUPS SI_POSIX
 #define SANITIZER_INTERCEPT_POLL SI_POSIX
-#define SANITIZER_INTERCEPT_PPOLL SI_LINUX_NOT_ANDROID || SI_SOLARIS
+#define SANITIZER_INTERCEPT_PPOLL SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS
 #define SANITIZER_INTERCEPT_WORDEXP                                          \
-  (SI_FREEBSD || SI_NETBSD || (SI_MAC && !SI_IOS) || SI_LINUX_NOT_ANDROID || \
+  (SI_FREEBSD || SI_NETBSD || (SI_MAC && !SI_IOS) || SI_LINUX_NOT_ANDROID || SI_ONYX || \
    SI_SOLARIS)  // NOLINT
 #define SANITIZER_INTERCEPT_SIGWAIT SI_POSIX
-#define SANITIZER_INTERCEPT_SIGWAITINFO SI_LINUX_NOT_ANDROID || SI_SOLARIS
-#define SANITIZER_INTERCEPT_SIGTIMEDWAIT SI_LINUX_NOT_ANDROID || SI_SOLARIS
+#define SANITIZER_INTERCEPT_SIGWAITINFO SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS
+#define SANITIZER_INTERCEPT_SIGTIMEDWAIT SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS
 #define SANITIZER_INTERCEPT_SIGSETOPS \
-  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
-#define SANITIZER_INTERCEPT_SIGSET_LOGICOPS SI_LINUX_NOT_ANDROID
+  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS)
+#define SANITIZER_INTERCEPT_SIGSET_LOGICOPS SI_LINUX_NOT_ANDROID || SI_ONYX
 #define SANITIZER_INTERCEPT_SIGPENDING SI_POSIX
 #define SANITIZER_INTERCEPT_SIGPROCMASK SI_POSIX
 #define SANITIZER_INTERCEPT_PTHREAD_SIGMASK SI_POSIX
 #define SANITIZER_INTERCEPT_BACKTRACE \
   (SI_FREEBSD || SI_NETBSD || SI_GLIBC || SI_SOLARIS)
-#define SANITIZER_INTERCEPT_GETMNTENT SI_LINUX
-#define SANITIZER_INTERCEPT_GETMNTENT_R SI_LINUX_NOT_ANDROID
+#define SANITIZER_INTERCEPT_GETMNTENT SI_LINUX || SI_ONYX
+#define SANITIZER_INTERCEPT_GETMNTENT_R SI_LINUX_NOT_ANDROID || SI_ONYX
 #define SANITIZER_INTERCEPT_STATFS \
-  (SI_FREEBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_FREEBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_STATFS64 \
   (((SI_MAC && !TARGET_CPU_ARM64) && !SI_IOS) || SI_LINUX_NOT_ANDROID)
 #define SANITIZER_INTERCEPT_STATVFS \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID)
-#define SANITIZER_INTERCEPT_STATVFS64 SI_LINUX_NOT_ANDROID
+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_ONYX)
+#define SANITIZER_INTERCEPT_STATVFS64 (SI_LINUX_NOT_ANDROID || SI_ONYX)
 #define SANITIZER_INTERCEPT_INITGROUPS SI_POSIX
 #define SANITIZER_INTERCEPT_ETHER_NTOA_ATON SI_POSIX
 #define SANITIZER_INTERCEPT_ETHER_HOST \
-  (SI_FREEBSD || SI_MAC || SI_LINUX_NOT_ANDROID)
-#define SANITIZER_INTERCEPT_ETHER_R (SI_FREEBSD || SI_LINUX_NOT_ANDROID)
+  (SI_FREEBSD || SI_MAC || (SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_ONYX)
+#define SANITIZER_INTERCEPT_ETHER_R (SI_FREEBSD || (SI_LINUX_NOT_ANDROID || SI_ONYX))
 #define SANITIZER_INTERCEPT_SHMCTL                                       \
-  (((SI_FREEBSD || SI_LINUX_NOT_ANDROID) && SANITIZER_WORDSIZE == 64) || \
+  (((SI_FREEBSD || (SI_LINUX_NOT_ANDROID || SI_ONYX)) && SANITIZER_WORDSIZE == 64) || \
    SI_NETBSD || SI_SOLARIS)  // NOLINT
 #define SANITIZER_INTERCEPT_RANDOM_R SI_GLIBC
 #define SANITIZER_INTERCEPT_PTHREAD_ATTR_GET SI_POSIX
 #define SANITIZER_INTERCEPT_PTHREAD_ATTR_GETINHERITSCHED \
-  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_MAC || (SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_PTHREAD_ATTR_GETAFFINITY_NP SI_GLIBC
 #define SANITIZER_INTERCEPT_PTHREAD_ATTR_GET_SCHED SI_POSIX
 #define SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETPSHARED \
   (SI_POSIX && !SI_NETBSD)
 #define SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETTYPE SI_POSIX
 #define SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETPROTOCOL \
-  (SI_MAC || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_MAC || SI_NETBSD || (SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_ONYX || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETPRIOCEILING \
-  (SI_MAC || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_MAC || SI_NETBSD || (SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETROBUST \
-  (SI_LINUX_NOT_ANDROID || SI_SOLARIS)
-#define SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETROBUST_NP SI_LINUX_NOT_ANDROID
+  ((SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_SOLARIS || SI_ONYX)
+#define SANITIZER_INTERCEPT_PTHREAD_MUTEXATTR_GETROBUST_NP (SI_LINUX_NOT_ANDROID || SI_ONYX)
 #define SANITIZER_INTERCEPT_PTHREAD_RWLOCKATTR_GETPSHARED \
   (SI_POSIX && !SI_NETBSD)
 #define SANITIZER_INTERCEPT_PTHREAD_RWLOCKATTR_GETKIND_NP SI_GLIBC
 #define SANITIZER_INTERCEPT_PTHREAD_CONDATTR_GETPSHARED (SI_POSIX && !SI_NETBSD)
 #define SANITIZER_INTERCEPT_PTHREAD_CONDATTR_GETCLOCK \
-  (SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  ((SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_PTHREAD_BARRIERATTR_GETPSHARED \
-  (SI_LINUX_NOT_ANDROID && !SI_NETBSD)
+  ((SI_LINUX_NOT_ANDROID || SI_ONYX) && !SI_NETBSD)
 #define SANITIZER_INTERCEPT_THR_EXIT SI_FREEBSD
 #define SANITIZER_INTERCEPT_TMPNAM SI_POSIX
 #define SANITIZER_INTERCEPT_TMPNAM_R (SI_GLIBC || SI_SOLARIS)
-#define SANITIZER_INTERCEPT_PTSNAME SI_LINUX
-#define SANITIZER_INTERCEPT_PTSNAME_R SI_LINUX
+#define SANITIZER_INTERCEPT_PTSNAME SI_LINUX || SI_ONYX
+#define SANITIZER_INTERCEPT_PTSNAME_R SI_LINUX || SI_ONYX
 #define SANITIZER_INTERCEPT_TTYNAME SI_POSIX
 #define SANITIZER_INTERCEPT_TTYNAME_R SI_POSIX
 #define SANITIZER_INTERCEPT_TEMPNAM SI_POSIX
-#define SANITIZER_INTERCEPT_SINCOS SI_LINUX || SI_SOLARIS
+#define SANITIZER_INTERCEPT_SINCOS SI_LINUX || SI_ONYX || SI_SOLARIS
 #define SANITIZER_INTERCEPT_REMQUO SI_POSIX
 #define SANITIZER_INTERCEPT_REMQUOL (SI_POSIX && !SI_NETBSD)
 #define SANITIZER_INTERCEPT_LGAMMA SI_POSIX
 #define SANITIZER_INTERCEPT_LGAMMAL (SI_POSIX && !SI_NETBSD)
-#define SANITIZER_INTERCEPT_LGAMMA_R (SI_FREEBSD || SI_LINUX || SI_SOLARIS)
-#define SANITIZER_INTERCEPT_LGAMMAL_R SI_LINUX_NOT_ANDROID || SI_SOLARIS
+#define SANITIZER_INTERCEPT_LGAMMA_R (SI_FREEBSD || SI_LINUX || SI_ONYX || SI_SOLARIS)
+#define SANITIZER_INTERCEPT_LGAMMAL_R (SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_DRAND48_R SI_GLIBC
 #define SANITIZER_INTERCEPT_RAND_R \
-  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_MAC || (SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_ICONV \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || (SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_TIMES SI_POSIX
 
 // FIXME: getline seems to be available on OSX 10.7
 #define SANITIZER_INTERCEPT_GETLINE \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || (SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_SOLARIS)
 
 #define SANITIZER_INTERCEPT__EXIT \
-  (SI_LINUX || SI_FREEBSD || SI_NETBSD || SI_MAC || SI_SOLARIS)
+  (SI_LINUX || SI_ONYX || SI_FREEBSD || SI_NETBSD || SI_MAC || SI_SOLARIS)
 
 #define SANITIZER_INTERCEPT_PTHREAD_MUTEX SI_POSIX
 #define SANITIZER_INTERCEPT___PTHREAD_MUTEX SI_GLIBC
 #define SANITIZER_INTERCEPT___LIBC_MUTEX SI_NETBSD
 #define SANITIZER_INTERCEPT_PTHREAD_SETNAME_NP \
-  (SI_FREEBSD || SI_NETBSD || SI_GLIBC || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_GLIBC || SI_SOLARIS || SI_ONYX)
 #define SANITIZER_INTERCEPT_PTHREAD_GETNAME_NP \
   (SI_FREEBSD || SI_NETBSD || SI_GLIBC || SI_SOLARIS)
 
 #define SANITIZER_INTERCEPT_TLS_GET_ADDR \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS)
 
-#define SANITIZER_INTERCEPT_LISTXATTR SI_LINUX
-#define SANITIZER_INTERCEPT_GETXATTR SI_LINUX
-#define SANITIZER_INTERCEPT_GETRESID SI_LINUX
+#define SANITIZER_INTERCEPT_LISTXATTR SI_LINUX || SI_ONYX
+#define SANITIZER_INTERCEPT_GETXATTR SI_LINUX || SI_ONYX
+#define SANITIZER_INTERCEPT_GETRESID SI_LINUX || SI_ONYX
 #define SANITIZER_INTERCEPT_GETIFADDRS \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_MAC || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_MAC || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_IF_INDEXTONAME \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_MAC || SI_SOLARIS)
-#define SANITIZER_INTERCEPT_CAPGET SI_LINUX_NOT_ANDROID
+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_MAC || SI_SOLARIS)
+#define SANITIZER_INTERCEPT_CAPGET (SI_LINUX_NOT_ANDROID)
 #if SI_LINUX && defined(__arm__)
 #define SANITIZER_INTERCEPT_AEABI_MEM 1
 #else
 #define SANITIZER_INTERCEPT_AEABI_MEM 0
 #endif
 #define SANITIZER_INTERCEPT___BZERO SI_MAC || SI_GLIBC
-#define SANITIZER_INTERCEPT_BZERO SI_LINUX_NOT_ANDROID
+#define SANITIZER_INTERCEPT_BZERO (SI_LINUX_NOT_ANDROID || SI_ONYX)
 #define SANITIZER_INTERCEPT_FTIME (!SI_FREEBSD && !SI_NETBSD && SI_POSIX)
 #define SANITIZER_INTERCEPT_XDR (SI_GLIBC || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_XDRREC SI_GLIBC
 #define SANITIZER_INTERCEPT_TSEARCH \
-  (SI_LINUX_NOT_ANDROID || SI_MAC || SI_NETBSD || SI_SOLARIS)
+  ((SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_MAC || SI_NETBSD || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_LIBIO_INTERNALS SI_GLIBC
 #define SANITIZER_INTERCEPT_FOPEN SI_POSIX
 #define SANITIZER_INTERCEPT_FOPEN64 (SI_GLIBC || SI_SOLARIS32)
 #define SANITIZER_INTERCEPT_OPEN_MEMSTREAM \
-  (SI_LINUX_NOT_ANDROID || SI_NETBSD || SI_SOLARIS)
+  ((SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_NETBSD || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_OBSTACK SI_GLIBC
 #define SANITIZER_INTERCEPT_FFLUSH SI_POSIX
 #define SANITIZER_INTERCEPT_FCLOSE SI_POSIX
 
 #ifndef SANITIZER_INTERCEPT_DLOPEN_DLCLOSE
 #define SANITIZER_INTERCEPT_DLOPEN_DLCLOSE \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_MAC || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_MAC || SI_SOLARIS)
 #endif
 
 #define SANITIZER_INTERCEPT_GETPASS \
-  (SI_LINUX_NOT_ANDROID || SI_MAC || SI_NETBSD)
-#define SANITIZER_INTERCEPT_TIMERFD SI_LINUX_NOT_ANDROID
+  ((SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_MAC || SI_NETBSD)
+#define SANITIZER_INTERCEPT_TIMERFD (SI_LINUX_NOT_ANDROID || SI_ONYX)
 
 #define SANITIZER_INTERCEPT_MLOCKX SI_POSIX
-#define SANITIZER_INTERCEPT_FOPENCOOKIE SI_LINUX_NOT_ANDROID
+#define SANITIZER_INTERCEPT_FOPENCOOKIE (SI_LINUX_NOT_ANDROID || SI_ONYX)
 #define SANITIZER_INTERCEPT_SEM \
-  (SI_LINUX || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)
+  (SI_LINUX || SI_ONYX || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_PTHREAD_SETCANCEL SI_POSIX
-#define SANITIZER_INTERCEPT_MINCORE (SI_LINUX || SI_NETBSD || SI_SOLARIS)
+#define SANITIZER_INTERCEPT_MINCORE (SI_LINUX || SI_ONYX || SI_NETBSD || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_PROCESS_VM_READV SI_LINUX
 #define SANITIZER_INTERCEPT_CTERMID \
-  (SI_LINUX || SI_MAC || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)
+  (SI_LINUX || SI_ONYX || SI_MAC || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_CTERMID_R (SI_MAC || SI_FREEBSD || SI_SOLARIS)
 
 #define SANITIZER_INTERCEPTOR_HOOKS \
-  (SI_LINUX || SI_MAC || SI_WINDOWS || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)
+  (SI_LINUX || SI_ONYX || SI_MAC || SI_WINDOWS || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_RECV_RECVFROM SI_POSIX
 #define SANITIZER_INTERCEPT_SEND_SENDTO SI_POSIX
 #define SANITIZER_INTERCEPT_EVENTFD_READ_WRITE SI_LINUX
 
 #define SANITIZER_INTERCEPT_STAT \
-  (SI_FREEBSD || SI_MAC || SI_ANDROID || SI_NETBSD || SI_SOLARIS)
+  (SI_FREEBSD || SI_MAC || SI_ANDROID || SI_NETBSD || SI_SOLARIS || SI_ONYX)
 #define SANITIZER_INTERCEPT_LSTAT (SI_NETBSD || SI_FREEBSD)
 #define SANITIZER_INTERCEPT___XSTAT (!SANITIZER_INTERCEPT_STAT && SI_POSIX)
-#define SANITIZER_INTERCEPT___XSTAT64 SI_LINUX_NOT_ANDROID
+#define SANITIZER_INTERCEPT___XSTAT64 (SI_LINUX_NOT_ANDROID || SI_ONYX)
 #define SANITIZER_INTERCEPT___LXSTAT SANITIZER_INTERCEPT___XSTAT
-#define SANITIZER_INTERCEPT___LXSTAT64 SI_LINUX_NOT_ANDROID
+#define SANITIZER_INTERCEPT___LXSTAT64 (SI_LINUX_NOT_ANDROID || SI_ONYX)
 
 #define SANITIZER_INTERCEPT_UTMP \
   (SI_POSIX && !SI_MAC && !SI_FREEBSD && !SI_NETBSD)
 #define SANITIZER_INTERCEPT_UTMPX \
-  (SI_LINUX_NOT_ANDROID || SI_MAC || SI_FREEBSD || SI_NETBSD)
+  (SI_LINUX_NOT_ANDROID || SI_ONYX || SI_MAC || SI_FREEBSD || SI_NETBSD)
 
 #define SANITIZER_INTERCEPT_GETLOADAVG \
-  (SI_LINUX_NOT_ANDROID || SI_MAC || SI_FREEBSD || SI_NETBSD)
+  (SI_LINUX_NOT_ANDROID || SI_ONYX || SI_MAC || SI_FREEBSD || SI_NETBSD)
 
 #define SANITIZER_INTERCEPT_MMAP SI_POSIX
-#define SANITIZER_INTERCEPT_MMAP64 SI_LINUX_NOT_ANDROID
+#define SANITIZER_INTERCEPT_MMAP64 (SI_LINUX_NOT_ANDROID || SI_ONYX)
 #define SANITIZER_INTERCEPT_MALLOPT_AND_MALLINFO (SI_GLIBC || SI_ANDROID)
 #define SANITIZER_INTERCEPT_MEMALIGN (!SI_FREEBSD && !SI_MAC && !SI_NETBSD)
 #define SANITIZER_INTERCEPT___LIBC_MEMALIGN SI_GLIBC
@@ -483,7 +489,7 @@
 #define SANITIZER_INTERCEPT_REALLOCARRAY SI_POSIX
 #define SANITIZER_INTERCEPT_ALIGNED_ALLOC (!SI_MAC)
 #define SANITIZER_INTERCEPT_MALLOC_USABLE_SIZE (!SI_MAC && !SI_NETBSD)
-#define SANITIZER_INTERCEPT_MCHECK_MPROBE SI_LINUX_NOT_ANDROID
+#define SANITIZER_INTERCEPT_MCHECK_MPROBE (SI_LINUX_NOT_ANDROID)
 #define SANITIZER_INTERCEPT_WCSCAT SI_POSIX
 #define SANITIZER_INTERCEPT_WCSDUP SI_POSIX
 #define SANITIZER_INTERCEPT_SIGNAL_AND_SIGACTION (!SI_WINDOWS && SI_NOT_FUCHSIA)
@@ -500,8 +506,8 @@
 #define SANITIZER_INTERCEPT_STRLCPY \
   (SI_NETBSD || SI_FREEBSD || SI_MAC || SI_ANDROID)
 
-#define SANITIZER_INTERCEPT_NAME_TO_HANDLE_AT SI_LINUX_NOT_ANDROID
-#define SANITIZER_INTERCEPT_OPEN_BY_HANDLE_AT SI_LINUX_NOT_ANDROID
+#define SANITIZER_INTERCEPT_NAME_TO_HANDLE_AT (SI_LINUX_NOT_ANDROID || SI_ONYX)
+#define SANITIZER_INTERCEPT_OPEN_BY_HANDLE_AT (SI_LINUX_NOT_ANDROID || SI_ONYX)
 
 #define SANITIZER_INTERCEPT_READLINK SI_POSIX
 #if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && \
@@ -518,15 +524,15 @@
 #define SANITIZER_INTERCEPT_FGETLN (SI_NETBSD || SI_FREEBSD)
 #define SANITIZER_INTERCEPT_STRMODE (SI_NETBSD || SI_FREEBSD)
 #define SANITIZER_INTERCEPT_TTYENT SI_NETBSD
-#define SANITIZER_INTERCEPT_PROTOENT (SI_NETBSD || SI_LINUX)
+#define SANITIZER_INTERCEPT_PROTOENT (SI_NETBSD || SI_LINUX || SI_ONYX)
 #define SANITIZER_INTERCEPT_PROTOENT_R SI_GLIBC
 #define SANITIZER_INTERCEPT_NETENT SI_NETBSD
 #define SANITIZER_INTERCEPT_SETVBUF \
-  (SI_NETBSD || SI_FREEBSD || SI_LINUX || SI_MAC)
+  (SI_NETBSD || SI_FREEBSD || SI_LINUX || SI_ONYX || SI_MAC)
 #define SANITIZER_INTERCEPT_GETMNTINFO (SI_NETBSD || SI_FREEBSD || SI_MAC)
 #define SANITIZER_INTERCEPT_MI_VECTOR_HASH SI_NETBSD
 #define SANITIZER_INTERCEPT_GETVFSSTAT SI_NETBSD
-#define SANITIZER_INTERCEPT_REGEX (SI_NETBSD || SI_FREEBSD || SI_LINUX)
+#define SANITIZER_INTERCEPT_REGEX (SI_NETBSD || SI_FREEBSD || SI_LINUX || SI_ONYX)
 #define SANITIZER_INTERCEPT_REGEXSUB SI_NETBSD
 #define SANITIZER_INTERCEPT_FTS (SI_NETBSD || SI_FREEBSD)
 #define SANITIZER_INTERCEPT_SYSCTL (SI_NETBSD || SI_FREEBSD || SI_MAC)
@@ -560,10 +566,10 @@
 #define SANITIZER_INTERCEPT_GETUSERSHELL (SI_POSIX && !SI_ANDROID)
 #define SANITIZER_INTERCEPT_SL_INIT (SI_FREEBSD || SI_NETBSD)
 #define SANITIZER_INTERCEPT_CRYPT (SI_POSIX && !SI_ANDROID)
-#define SANITIZER_INTERCEPT_CRYPT_R (SI_LINUX && !SI_ANDROID)
+#define SANITIZER_INTERCEPT_CRYPT_R (SI_LINUX || SI_ONYX && !SI_ANDROID)
 
 #define SANITIZER_INTERCEPT_GETRANDOM \
-  ((SI_LINUX && __GLIBC_PREREQ(2, 25)) || SI_FREEBSD)
+  ((SI_LINUX && __GLIBC_PREREQ(2, 25)) || SI_FREEBSD || SI_ONYX)
 #define SANITIZER_INTERCEPT___CXA_ATEXIT SI_NETBSD
 #define SANITIZER_INTERCEPT_ATEXIT SI_NETBSD
 #define SANITIZER_INTERCEPT_PTHREAD_ATFORK SI_NETBSD
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_posix.cpp llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_posix.cpp
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_posix.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_posix.cpp	2022-02-03 15:24:18.501812660 +0000
@@ -11,7 +11,7 @@
 // Sizes and layouts of platform-specific POSIX data structures.
 //===----------------------------------------------------------------------===//
 
-#if defined(__linux__) || defined(__APPLE__)
+#if defined(__linux__) || defined(__onyx__) || defined(__APPLE__)
 // Tests in this file assume that off_t-dependent data structures match the
 // libc ABI. For example, struct dirent here is what readdir() function (as
 // exported from libc) returns, and not the user-facing "dirent", which
@@ -23,7 +23,7 @@
 // Must go after undef _FILE_OFFSET_BITS.
 #include "sanitizer_platform.h"
 
-#if SANITIZER_LINUX || SANITIZER_MAC
+#if SANITIZER_LINUX || SANITIZER_MAC || SANITIZER_ONYX
 // Must go after undef _FILE_OFFSET_BITS.
 #include "sanitizer_glibc_version.h"
 
@@ -160,7 +160,11 @@
 #include <sys/epoll.h>
 #include <linux/capability.h>
 #else
+
+#if !SANITIZER_ONYX
 #include <fstab.h>
+#endif
+
 #endif // SANITIZER_LINUX
 
 #if SANITIZER_MAC
@@ -169,6 +173,28 @@
 #include <sys/sockio.h>
 #endif
 
+#if SANITIZER_ONYX
+#include <mntent.h>
+#include <crypt.h>
+#include <sys/statvfs.h>
+#include <sys/statfs.h>
+#include <glob.h>
+#include <sys/ioctl.h>
+#include <utime.h>
+#include <stdio.h>
+#include <net/ethernet.h>
+#include <netinet/ether.h>
+#include <net/if.h>
+#include <sys/timeb.h>
+#include <sys/mount.h>
+#include <utmpx.h>
+#include <mqueue.h>
+#include <sys/mtio.h>
+#include <sys/msg.h>
+#include <sys/shm.h>
+#include <sys/timex.h>
+#endif
+
 // Include these after system headers to avoid name clashes and ambiguities.
 #include "sanitizer_internal_defs.h"
 #include "sanitizer_platform_limits_posix.h"
@@ -228,14 +254,14 @@
   unsigned struct_oldold_utsname_sz = sizeof(struct oldold_utsname);
 #endif // SANITIZER_LINUX
 
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
   unsigned struct_rlimit_sz = sizeof(struct rlimit);
   unsigned struct_timespec_sz = sizeof(struct timespec);
   unsigned struct_utimbuf_sz = sizeof(struct utimbuf);
   unsigned struct_itimerspec_sz = sizeof(struct itimerspec);
 #endif // SANITIZER_LINUX
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
   // Use pre-computed size of struct ustat to avoid <sys/ustat.h> which
   // has been removed from glibc 2.28.
 #if defined(__aarch64__) || defined(__s390x__) || defined(__mips64) ||     \
@@ -254,7 +280,7 @@
   unsigned struct_crypt_data_sz = sizeof(struct crypt_data);
 #endif // SANITIZER_LINUX && !SANITIZER_ANDROID
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX || SANITIZER_ONYX && !SANITIZER_ANDROID
   unsigned struct_timex_sz = sizeof(struct timex);
   unsigned struct_msqid_ds_sz = sizeof(struct msqid_ds);
   unsigned struct_mq_attr_sz = sizeof(struct mq_attr);
@@ -271,7 +297,7 @@
 #endif
 
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX || SANITIZER_ONYX && !SANITIZER_ANDROID
   unsigned struct_shminfo_sz = sizeof(struct shminfo);
   unsigned struct_shm_info_sz = sizeof(struct shm_info);
   int shmctl_ipc_stat = (int)IPC_STAT;
@@ -484,7 +510,7 @@
   unsigned struct_ppp_stats_sz = sizeof(struct ppp_stats);
 #endif  // SANITIZER_GLIBC
 
-#if !SANITIZER_ANDROID && !SANITIZER_MAC
+#if !SANITIZER_ANDROID && !SANITIZER_MAC && !SANITIZER_ONYX
   unsigned struct_sioc_sg_req_sz = sizeof(struct sioc_sg_req);
   unsigned struct_sioc_vif_req_sz = sizeof(struct sioc_vif_req);
 #endif
@@ -537,6 +563,7 @@
   unsigned IOCTL_TIOCSPGRP = TIOCSPGRP;
   unsigned IOCTL_TIOCSTI = TIOCSTI;
   unsigned IOCTL_TIOCSWINSZ = TIOCSWINSZ;
+
 #if SANITIZER_LINUX && !SANITIZER_ANDROID
   unsigned IOCTL_SIOCGETSGCNT = SIOCGETSGCNT;
   unsigned IOCTL_SIOCGETVIFCNT = SIOCGETVIFCNT;
@@ -1173,7 +1200,7 @@
 CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_name);
 CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_addr);
 CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_netmask);
-#if SANITIZER_LINUX || SANITIZER_FREEBSD
+#if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_ONYX
 // Compare against the union, because we can't reach into the union in a
 // compliant way.
 #ifdef ifa_dstaddr
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_posix.h llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_posix.h
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_posix.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_posix.h	2022-02-03 15:24:18.501812660 +0000
@@ -14,7 +14,7 @@
 #ifndef SANITIZER_PLATFORM_LIMITS_POSIX_H
 #define SANITIZER_PLATFORM_LIMITS_POSIX_H
 
-#if SANITIZER_LINUX || SANITIZER_MAC
+#if SANITIZER_LINUX || SANITIZER_ONYX || SANITIZER_MAC
 
 #include "sanitizer_internal_defs.h"
 #include "sanitizer_platform.h"
@@ -54,7 +54,9 @@
 extern unsigned struct_regmatch_sz;
 
 #if !SANITIZER_ANDROID
+#if !SANITIZER_ONYX
 extern unsigned struct_fstab_sz;
+#endif
 extern unsigned struct_statfs_sz;
 extern unsigned struct_sockaddr_sz;
 extern unsigned ucontext_t_sz;
@@ -120,7 +122,7 @@
 const unsigned struct_kexec_segment_sz = 4 * sizeof(unsigned long);
 #endif  // SANITIZER_LINUX
 
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
 
 #if defined(__powerpc64__) || defined(__s390__)
 const unsigned struct___old_kernel_stat_sz = 0;
@@ -175,11 +177,11 @@
   int data[4];
 #elif SANITIZER_ANDROID && !defined(_LP64)
   int data;
-#elif SANITIZER_LINUX
+#elif SANITIZER_LINUX || SANITIZER_ONYX
   uptr data[4];
 #endif
 };
-#endif // SANITIZER_LINUX
+#endif // SANITIZER_LINUX || SANITIZER_ONYX
 
 #if SANITIZER_ANDROID
 struct __sanitizer_struct_mallinfo {
@@ -187,7 +189,7 @@
 };
 #endif
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 struct __sanitizer_struct_mallinfo {
   int v[10];
 };
@@ -290,7 +292,7 @@
 };
 #endif
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 extern unsigned struct_msqid_ds_sz;
 extern unsigned struct_mq_attr_sz;
 extern unsigned struct_timex_sz;
@@ -410,7 +412,7 @@
   const char *tm_zone;
 };
 
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
 struct __sanitizer_mntent {
   char *mnt_fsname;
   char *mnt_dir;
@@ -442,6 +444,42 @@
   int cmsg_level;
   int cmsg_type;
 };
+#elif SANITIZER_ONYX
+
+struct __sanitizer_msghdr {
+	void *msg_name;
+	unsigned int msg_namelen;
+	struct __sanitizer_iovec *msg_iov;
+#if __LONG_MAX > 0x7fffffff && __BYTE_ORDER == __BIG_ENDIAN
+	int __pad1;
+#endif
+	int msg_iovlen;
+#if __LONG_MAX > 0x7fffffff && __BYTE_ORDER == __LITTLE_ENDIAN
+	int __pad1;
+#endif
+	void *msg_control;
+#if __LONG_MAX > 0x7fffffff && __BYTE_ORDER == __BIG_ENDIAN
+	int __pad2;
+#endif
+	unsigned int msg_controllen;
+#if __LONG_MAX > 0x7fffffff && __BYTE_ORDER == __LITTLE_ENDIAN
+	int __pad2;
+#endif
+	int msg_flags;
+};
+
+struct __sanitizer_cmsghdr {
+#if __LONG_MAX > 0x7fffffff && __BYTE_ORDER == __BIG_ENDIAN
+	int __pad1;
+#endif
+	unsigned int cmsg_len;
+#if __LONG_MAX > 0x7fffffff && __BYTE_ORDER == __LITTLE_ENDIAN
+	int __pad1;
+#endif
+	int cmsg_level;
+	int cmsg_type;
+};
+
 #else
 // In POSIX, int msg_iovlen; socklen_t msg_controllen; socklen_t cmsg_len; but
 // many implementations don't conform to the standard.
@@ -461,7 +499,7 @@
 };
 #endif
 
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
 struct __sanitizer_mmsghdr {
   __sanitizer_msghdr msg_hdr;
   unsigned int msg_len;
@@ -491,7 +529,7 @@
 };
 #endif
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 struct __sanitizer_dirent64 {
   unsigned long long d_ino;
   unsigned long long d_off;
@@ -506,11 +544,11 @@
 typedef long __sanitizer_clock_t;
 #endif
 
-#if SANITIZER_LINUX
+#if (SANITIZER_LINUX || SANITIZER_ONYX)
 typedef int __sanitizer_clockid_t;
 #endif
 
-#if SANITIZER_LINUX
+#if (SANITIZER_LINUX || SANITIZER_ONYX)
 #if defined(_LP64) || defined(__x86_64__) || defined(__powerpc__) || \
     defined(__mips__)
 typedef unsigned __sanitizer___kernel_uid_t;
@@ -554,7 +592,7 @@
 # endif
 #elif SANITIZER_MAC
 typedef unsigned __sanitizer_sigset_t;
-#elif SANITIZER_LINUX
+#elif (SANITIZER_LINUX || SANITIZER_ONYX)
 struct __sanitizer_sigset_t {
   // The size is determined by looking at sizeof of real sigset_t on linux.
   uptr val[128 / sizeof(uptr)];
@@ -637,7 +675,7 @@
 #endif
 #endif
 #endif
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
   void (*sa_restorer)();
 #endif
 #if defined(__mips__) && (SANITIZER_WORDSIZE == 32)
@@ -687,7 +725,7 @@
 extern const uptr sig_err;
 extern const uptr sa_siginfo;
 
-#if SANITIZER_LINUX
+#if (SANITIZER_LINUX || SANITIZER_ONYX)
 extern int e_tabsz;
 #endif
 
@@ -695,7 +733,7 @@
 extern int af_inet6;
 uptr __sanitizer_in_addr_sz(int af);
 
-#if SANITIZER_LINUX
+#if (SANITIZER_LINUX || SANITIZER_ONYX)
 struct __sanitizer_dl_phdr_info {
   uptr dlpi_addr;
   const char *dlpi_name;
@@ -750,7 +788,7 @@
 #endif
 
 #if !SANITIZER_ANDROID
-# if SANITIZER_LINUX
+# if (SANITIZER_LINUX || SANITIZER_ONYX)
 struct __sanitizer_glob_t {
   uptr gl_pathc;
   char **gl_pathv;
@@ -763,9 +801,9 @@
   int (*gl_lstat)(const char *, void *);
   int (*gl_stat)(const char *, void *);
 };
-# endif  // SANITIZER_LINUX
+# endif  // (SANITIZER_LINUX || SANITIZER_ONYX)
 
-# if SANITIZER_LINUX
+# if (SANITIZER_LINUX || SANITIZER_ONYX)
 extern int glob_nomatch;
 extern int glob_altdirfunc;
 # endif
@@ -779,7 +817,7 @@
   uptr we_offs;
 };
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 struct __sanitizer_FILE {
   int _flags;
   char *_IO_read_ptr;
@@ -803,7 +841,7 @@
 # define SANITIZER_HAS_STRUCT_FILE 0
 #endif
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID &&                               \
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID &&                               \
     (defined(__i386) || defined(__x86_64) || defined(__mips64) ||          \
      defined(__powerpc64__) || defined(__aarch64__) || defined(__arm__) || \
      defined(__s390__) || SANITIZER_RISCV64)
@@ -830,7 +868,7 @@
 extern int ptrace_geteventmsg;
 #endif
 
-#if SANITIZER_LINUX  && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX)  && !SANITIZER_ANDROID
 extern unsigned struct_shminfo_sz;
 extern unsigned struct_shm_info_sz;
 extern int shmctl_ipc_stat;
@@ -860,7 +898,7 @@
 };
 #endif
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 struct __sanitizer__obstack_chunk {
   char *limit;
   struct __sanitizer__obstack_chunk *prev;
@@ -937,7 +975,7 @@
 extern unsigned struct_termios_sz;
 extern unsigned struct_winsize_sz;
 
-#if SANITIZER_LINUX
+#if (SANITIZER_LINUX || SANITIZER_ONYX)
 extern unsigned struct_arpreq_sz;
 extern unsigned struct_cdrom_msf_sz;
 extern unsigned struct_cdrom_multisession_sz;
@@ -965,9 +1003,9 @@
 extern unsigned struct_vt_consize_sz;
 extern unsigned struct_vt_sizes_sz;
 extern unsigned struct_vt_stat_sz;
-#endif  // SANITIZER_LINUX
+#endif  // (SANITIZER_LINUX || SANITIZER_ONYX)
 
-#if SANITIZER_LINUX
+#if (SANITIZER_LINUX || SANITIZER_ONYX)
 extern unsigned struct_copr_buffer_sz;
 extern unsigned struct_copr_debug_buf_sz;
 extern unsigned struct_copr_msg_sz;
@@ -979,9 +1017,9 @@
 extern unsigned struct_seq_event_rec_sz;
 extern unsigned struct_synth_info_sz;
 extern unsigned struct_vt_mode_sz;
-#endif // SANITIZER_LINUX
+#endif // (SANITIZER_LINUX || SANITIZER_ONYX)
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 extern unsigned struct_ax25_parms_struct_sz;
 extern unsigned struct_input_keymap_entry_sz;
 extern unsigned struct_ipx_config_data_sz;
@@ -998,14 +1036,14 @@
 extern unsigned struct_sockaddr_ax25_sz;
 extern unsigned struct_unimapdesc_sz;
 extern unsigned struct_unimapinit_sz;
-#endif  // SANITIZER_LINUX && !SANITIZER_ANDROID
+#endif  // (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 
 extern const unsigned long __sanitizer_bufsiz;
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 extern unsigned struct_audio_buf_info_sz;
 extern unsigned struct_ppp_stats_sz;
-#endif  // (SANITIZER_LINUX || SANITIZER_FREEBSD) && !SANITIZER_ANDROID
+#endif  // ((SANITIZER_LINUX || SANITIZER_ONYX) || SANITIZER_FREEBSD) && !SANITIZER_ANDROID
 
 #if !SANITIZER_ANDROID && !SANITIZER_MAC
 extern unsigned struct_sioc_sg_req_sz;
@@ -1062,11 +1100,11 @@
 extern unsigned IOCTL_TIOCSPGRP;
 extern unsigned IOCTL_TIOCSTI;
 extern unsigned IOCTL_TIOCSWINSZ;
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 extern unsigned IOCTL_SIOCGETSGCNT;
 extern unsigned IOCTL_SIOCGETVIFCNT;
 #endif
-#if SANITIZER_LINUX
+#if (SANITIZER_LINUX || SANITIZER_ONYX)
 extern unsigned IOCTL_EVIOCGABS;
 extern unsigned IOCTL_EVIOCGBIT;
 extern unsigned IOCTL_EVIOCGEFFECTS;
@@ -1324,7 +1362,7 @@
 extern unsigned IOCTL_VT_RELDISP;
 extern unsigned IOCTL_VT_SETMODE;
 extern unsigned IOCTL_VT_WAITACTIVE;
-#endif  // SANITIZER_LINUX
+#endif  // (SANITIZER_LINUX || SANITIZER_ONYX)
 
 #if SANITIZER_LINUX && !SANITIZER_ANDROID
 extern unsigned IOCTL_EQL_EMANCIPATE;
@@ -1440,6 +1478,6 @@
 
 #define SIGACTION_SYMNAME sigaction
 
-#endif  // SANITIZER_LINUX || SANITIZER_MAC
+#endif  // (SANITIZER_LINUX || SANITIZER_ONYX) || SANITIZER_MAC
 
 #endif
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_posix_libcdep.cpp llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_posix_libcdep.cpp
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_posix_libcdep.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_posix_libcdep.cpp	2022-02-03 15:24:18.501812660 +0000
@@ -293,7 +293,9 @@
   // to read the file mappings from /proc/self/maps. Luckily, neither the
   // process will be able to load additional libraries, so it's fine to use the
   // cached mappings.
+#if !SANITIZER_ONYX
   MemoryMappingLayout::CacheMemoryMappings();
+#endif
 }
 
 static bool MmapFixed(uptr fixed_addr, uptr size, int additional_flags,
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_procmaps.h llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_procmaps.h
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_procmaps.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_procmaps.h	2022-02-03 15:24:18.501812660 +0000
@@ -17,11 +17,12 @@
 
 #if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD || \
     SANITIZER_MAC || SANITIZER_SOLARIS ||  \
-    SANITIZER_FUCHSIA
+    SANITIZER_FUCHSIA || SANITIZER_ONYX
 
 #include "sanitizer_common.h"
 #include "sanitizer_internal_defs.h"
 #include "sanitizer_fuchsia.h"
+#include "sanitizer_onyx.h"
 #include "sanitizer_linux.h"
 #include "sanitizer_mac.h"
 #include "sanitizer_mutex.h"
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_procmaps_onyx.cpp llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_procmaps_onyx.cpp
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_procmaps_onyx.cpp	1970-01-01 01:00:00.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_procmaps_onyx.cpp	2022-02-03 15:24:18.501812660 +0000
@@ -0,0 +1,121 @@
+//===-- sanitizer_procmaps_onyx.cpp
+//----------------------------------------===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+//
+// Information about the process mappings (Onyx-specific parts).
+//===----------------------------------------------------------------------===//
+
+#include "sanitizer_platform.h"
+#if SANITIZER_ONYX
+#include <onyx/public/process.h>
+#include <onyx/public/handle.h>
+
+#include "sanitizer_errno.h"
+#include "sanitizer_common.h"
+#include "sanitizer_procmaps.h"
+
+namespace __sanitizer {
+
+MemoryMappingLayout::MemoryMappingLayout(bool) { Reset(); }
+
+void MemoryMappingLayout::Reset() {
+  data_.data.clear();
+  data_.current = 0;
+
+  size_t count = 0;
+  int handle = internal_onx_handle_open(ONX_HANDLE_TYPE_PROCESS, internal_getpid(), ONX_HANDLE_CLOEXEC);
+  if (handle < 0) {
+    return;
+  }
+
+  size_t filled;
+  do {
+    data_.data.resize(count);
+    auto status = internal_onx_handle_query(handle, data_.data.data(),
+        count, PROCESS_GET_VM_REGIONS, &count, nullptr);
+    if (status == -1 && errno != errno_ENOSPC) {
+      data_.data.clear();
+      internal_onx_handle_close(handle);
+      return;
+    }
+
+    filled = status;
+  } while (filled < count);
+
+  internal_onx_handle_close(handle);
+}
+
+MemoryMappingLayout::~MemoryMappingLayout() {}
+
+bool MemoryMappingLayout::Error() const { return data_.data.empty(); }
+
+bool MemoryMappingLayout::Next(MemoryMappedSegment *segment) {
+  while (data_.current < data_.data.size()) {
+    const onx_process_vm_region *reg = (onx_process_vm_region *) &data_.data[data_.current];
+    segment->start = reg->start;
+    segment->end = reg->length;
+    segment->offset = reg->offset;
+    const auto flags = reg->protection;
+    segment->protection =
+        ((flags & VM_REGION_PROT_READ) ? kProtectionRead : 0) |
+        ((flags & VM_REGION_PROT_WRITE) ? kProtectionWrite : 0) |
+        ((flags & VM_REGION_PROT_EXEC) ? kProtectionExecute : 0);
+    if (segment->filename && segment->filename_size > 0) {
+      uptr len = Min(reg->size - sizeof(onx_process_vm_region), segment->filename_size) - 1;
+      internal_strncpy(segment->filename, reg->name, len);
+      segment->filename[len] = 0;
+    }
+
+    data_.current += reg->size;
+    return true;
+  }
+  return false;
+}
+
+void MemoryMappingLayout::DumpListOfModules(
+    InternalMmapVectorNoCtor<LoadedModule> *modules) {
+  Reset();
+  InternalMmapVector<char> module_name(kMaxPathLength);
+  MemoryMappedSegment segment(module_name.data(), module_name.size());
+  for (uptr i = 0; Next(&segment); i++) {
+    const char *cur_name = segment.filename;
+    if (cur_name[0] == '\0')
+      continue;
+    // Don't subtract 'cur_beg' from the first entry:
+    // * If a binary is compiled w/o -pie, then the first entry in
+    //   process maps is likely the binary itself (all dynamic libs
+    //   are mapped higher in address space). For such a binary,
+    //   instruction offset in binary coincides with the actual
+    //   instruction address in virtual memory (as code section
+    //   is mapped to a fixed memory range).
+    // * If a binary is compiled with -pie, all the modules are
+    //   mapped high at address space (in particular, higher than
+    //   shadow memory of the tool), so the module can't be the
+    //   first entry.
+    uptr base_address = (i ? segment.start : 0) - segment.offset;
+    LoadedModule cur_module;
+    cur_module.set(cur_name, base_address);
+    segment.AddAddressRanges(&cur_module);
+    modules->push_back(cur_module);
+  }
+}
+
+void MemoryMappedSegment::AddAddressRanges(LoadedModule *module) {
+  // data_ should be unused on this platform
+  CHECK(!data_);
+  module->addAddressRange(start, end, IsExecutable(), IsWritable());
+}
+
+void GetMemoryProfile(fill_profile_f cb, uptr *stats, uptr stats_size)
+{
+  // TODO: Implement
+}
+
+}  // namespace __sanitizer
+
+#endif  // SANITIZER_ONYX
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_onyx.cpp llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_onyx.cpp
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_onyx.cpp	1970-01-01 01:00:00.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_onyx.cpp	2022-02-03 15:24:18.501812660 +0000
@@ -0,0 +1,27 @@
+//===-- sanitizer_stoptheworld_onyx.cpp -------------------------------===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===---------------------------------------------------------------------===//
+//
+// See sanitizer_stoptheworld.h for details.
+//
+//===---------------------------------------------------------------------===//
+
+#include "sanitizer_platform.h"
+
+#if SANITIZER_ONYX
+
+#include "sanitizer_stoptheworld.h"
+
+namespace __sanitizer {
+
+void StopTheWorld(StopTheWorldCallback callback, void *argument) {
+    // TODO: Implement
+}  // namespace __sanitizer
+
+}
+
+#endif  // SANITIZER_ONYX
diff -Naur llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_unwind_linux_libcdep.cpp llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_unwind_linux_libcdep.cpp
--- llvm-project-13.0.0/compiler-rt/lib/sanitizer_common/sanitizer_unwind_linux_libcdep.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/sanitizer_common/sanitizer_unwind_linux_libcdep.cpp	2022-02-03 15:24:18.501812660 +0000
@@ -12,7 +12,7 @@
 
 #include "sanitizer_platform.h"
 #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 #include "sanitizer_common.h"
 #include "sanitizer_stacktrace.h"
 
@@ -177,4 +177,4 @@
 }  // namespace __sanitizer
 
 #endif  // SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD ||
-        // SANITIZER_SOLARIS
+        // SANITIZER_SOLARIS || SANITIZER_ONYX
diff -Naur llvm-project-13.0.0/compiler-rt/lib/scudo/scudo_platform.h llvm-project-13.0.0-patched/compiler-rt/lib/scudo/scudo_platform.h
--- llvm-project-13.0.0/compiler-rt/lib/scudo/scudo_platform.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/scudo/scudo_platform.h	2022-02-03 15:24:18.501812660 +0000
@@ -16,7 +16,7 @@
 
 #include "sanitizer_common/sanitizer_allocator.h"
 
-#if !SANITIZER_LINUX && !SANITIZER_FUCHSIA
+#if !SANITIZER_LINUX && !SANITIZER_FUCHSIA && !SANITIZER_ONYX
 # error "The Scudo hardened allocator is not supported on this platform."
 #endif
 
@@ -27,7 +27,7 @@
 # if SANITIZER_ANDROID || SANITIZER_FUCHSIA
 // Android and Fuchsia use a pool of TSDs shared between threads.
 #  define SCUDO_TSD_EXCLUSIVE 0
-# elif SANITIZER_LINUX && !SANITIZER_ANDROID
+# elif SANITIZER_LINUX && !SANITIZER_ANDROID || SANITIZER_ONYX
 // Non-Android Linux use an exclusive TSD per thread.
 #  define SCUDO_TSD_EXCLUSIVE 1
 # else
diff -Naur llvm-project-13.0.0/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp llvm-project-13.0.0-patched/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp
--- llvm-project-13.0.0/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp	2022-02-03 15:24:18.505146043 +0000
@@ -1063,7 +1063,7 @@
   REAL(pthread_exit)(retval);
 }
 
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
 TSAN_INTERCEPTOR(int, pthread_tryjoin_np, void *th, void **ret) {
   SCOPED_INTERCEPTOR_RAW(pthread_tryjoin_np, th, ret);
   int tid = ThreadConsumeTid(thr, pc, (uptr)th);
@@ -1517,7 +1517,7 @@
 #endif
 
 TSAN_INTERCEPTOR(int, fstat, int fd, void *buf) {
-#if SANITIZER_FREEBSD || SANITIZER_MAC || SANITIZER_ANDROID || SANITIZER_NETBSD
+#if SANITIZER_FREEBSD || SANITIZER_MAC || SANITIZER_ANDROID || SANITIZER_NETBSD || SANITIZER_ONYX
   SCOPED_TSAN_INTERCEPTOR(fstat, fd, buf);
   if (fd > 0)
     FdAccess(thr, pc, fd);
@@ -2752,7 +2752,7 @@
   TSAN_INTERCEPT(pthread_join);
   TSAN_INTERCEPT(pthread_detach);
   TSAN_INTERCEPT(pthread_exit);
-  #if SANITIZER_LINUX
+  #if SANITIZER_LINUX || SANITIZER_ONYX
   TSAN_INTERCEPT(pthread_tryjoin_np);
   TSAN_INTERCEPT(pthread_timedjoin_np);
   #endif
diff -Naur llvm-project-13.0.0/compiler-rt/lib/tsan/rtl/tsan_platform_linux.cpp llvm-project-13.0.0-patched/compiler-rt/lib/tsan/rtl/tsan_platform_linux.cpp
--- llvm-project-13.0.0/compiler-rt/lib/tsan/rtl/tsan_platform_linux.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/tsan/rtl/tsan_platform_linux.cpp	2022-02-03 15:24:18.505146043 +0000
@@ -12,7 +12,7 @@
 //===----------------------------------------------------------------------===//
 
 #include "sanitizer_common/sanitizer_platform.h"
-#if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD
+#if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD || SANITIZER_ONYX
 
 #include "sanitizer_common/sanitizer_common.h"
 #include "sanitizer_common/sanitizer_libc.h"
@@ -35,7 +35,7 @@
 #include <string.h>
 #include <stdarg.h>
 #include <sys/mman.h>
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
 #include <sys/personality.h>
 #include <setjmp.h>
 #endif
@@ -141,7 +141,7 @@
       nlive, nthread);
 }
 
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
 void FlushShadowMemoryCallback(
     const SuspendedThreadsList &suspended_threads_list,
     void *argument) {
@@ -150,7 +150,7 @@
 #endif
 
 void FlushShadowMemory() {
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
   StopTheWorld(FlushShadowMemoryCallback, 0);
 #endif
 }
@@ -363,7 +363,7 @@
 // Reverse operation of libc stack pointer mangling
 static uptr UnmangleLongJmpSp(uptr mangled_sp) {
 #if defined(__x86_64__)
-# if SANITIZER_LINUX
+# if SANITIZER_LINUX || SANITIZER_ONYX
   // Reverse of:
   //   xor  %fs:0x30, %rsi
   //   rol  $0x11, %rsi
@@ -410,7 +410,7 @@
 # define LONG_JMP_SP_ENV_SLOT 0
 #elif SANITIZER_FREEBSD
 # define LONG_JMP_SP_ENV_SLOT 2
-#elif SANITIZER_LINUX
+#elif SANITIZER_LINUX || SANITIZER_ONYX
 # ifdef __aarch64__
 #  define LONG_JMP_SP_ENV_SLOT 13
 # elif defined(__mips64)
diff -Naur llvm-project-13.0.0/compiler-rt/lib/tsan/rtl/tsan_rtl_amd64.S llvm-project-13.0.0-patched/compiler-rt/lib/tsan/rtl/tsan_rtl_amd64.S
--- llvm-project-13.0.0/compiler-rt/lib/tsan/rtl/tsan_rtl_amd64.S	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/tsan/rtl/tsan_rtl_amd64.S	2022-02-03 15:24:18.505146043 +0000
@@ -192,7 +192,7 @@
   // obtain SP, store in %rdi, first argument to `void __tsan_setjmp(uptr sp)`
 #if defined(__FreeBSD__) || defined(__NetBSD__)
   lea 8(%rsp), %rdi
-#elif defined(__linux__) || defined(__APPLE__)
+#elif defined(__linux__) || defined(__APPLE__) || defined(__onyx__)
   lea 16(%rsp), %rdi
 #else
 # error "Unknown platform"
@@ -233,7 +233,7 @@
   // obtain SP, store in %rdi, first argument to `void __tsan_setjmp(uptr sp)`
 #if defined(__FreeBSD__) || defined(__NetBSD__)
   lea 8(%rsp), %rdi
-#elif defined(__linux__) || defined(__APPLE__)
+#elif defined(__linux__) || defined(__APPLE__) || defined(__onyx__)
   lea 16(%rsp), %rdi
 #else
 # error "Unknown platform"
@@ -281,7 +281,7 @@
   // obtain SP, store in %rdi, first argument to `void __tsan_setjmp(uptr sp)`
 #if defined(__FreeBSD__) || defined(__NetBSD__)
   lea 24(%rsp), %rdi
-#elif defined(__linux__) || defined(__APPLE__)
+#elif defined(__linux__) || defined(__APPLE__) || defined(__onyx__)
   lea 32(%rsp), %rdi
 #else
 # error "Unknown platform"
diff -Naur llvm-project-13.0.0/compiler-rt/lib/ubsan/ubsan_platform.h llvm-project-13.0.0-patched/compiler-rt/lib/ubsan/ubsan_platform.h
--- llvm-project-13.0.0/compiler-rt/lib/ubsan/ubsan_platform.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/compiler-rt/lib/ubsan/ubsan_platform.h	2022-02-03 15:24:18.505146043 +0000
@@ -16,7 +16,7 @@
 #if defined(__linux__) || defined(__FreeBSD__) || defined(__APPLE__) ||        \
     defined(__NetBSD__) || defined(__DragonFly__) ||                           \
     (defined(__sun__) && defined(__svr4__)) || defined(_WIN32) ||              \
-    defined(__Fuchsia__)
+    defined(__Fuchsia__) || defined(__onyx__)
 #define CAN_SANITIZE_UB 1
 #else
 # define CAN_SANITIZE_UB 0
diff -Naur llvm-project-13.0.0/libcxx/include/__config llvm-project-13.0.0-patched/libcxx/include/__config
--- llvm-project-13.0.0/libcxx/include/__config	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/libcxx/include/__config	2022-02-03 15:24:18.505146043 +0000
@@ -382,7 +382,7 @@
 #    if __ANDROID_API__ >= 29
 #      define _LIBCPP_HAS_TIMESPEC_GET
 #    endif
-#  elif defined(__Fuchsia__) || defined(__wasi__) || defined(__NetBSD__)
+#  elif defined(__Fuchsia__) || defined(__wasi__) || defined(__NetBSD__) || defined(__onyx__)
 #    define _LIBCPP_HAS_ALIGNED_ALLOC
 #    define _LIBCPP_HAS_QUICK_EXIT
 #    define _LIBCPP_HAS_TIMESPEC_GET
@@ -1142,6 +1142,7 @@
       defined(__OpenBSD__) || \
       defined(__NuttX__) || \
       defined(__linux__) || \
+      defined(__onyx__) || \
       defined(__GNU__) || \
       defined(__APPLE__) || \
       defined(__CloudABI__) || \
@@ -1242,7 +1243,7 @@
 
 #if defined(__BIONIC__) || defined(__CloudABI__) || defined(__NuttX__) ||      \
     defined(__Fuchsia__) || defined(__wasi__) || defined(_LIBCPP_HAS_MUSL_LIBC) || \
-    defined(__MVS__) || defined(__OpenBSD__)
+    defined(__MVS__) || defined(__OpenBSD__) || defined(__onyx__)
 #define _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE
 #endif
 
diff -Naur llvm-project-13.0.0/libcxx/include/__locale llvm-project-13.0.0-patched/libcxx/include/__locale
--- llvm-project-13.0.0/libcxx/include/__locale	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/libcxx/include/__locale	2022-02-03 15:24:18.505146043 +0000
@@ -43,7 +43,7 @@
 #elif defined(__wasi__)
 // WASI libc uses musl's locales support.
 # include <__support/musl/xlocale.h>
-#elif defined(_LIBCPP_HAS_MUSL_LIBC)
+#elif defined(_LIBCPP_HAS_MUSL_LIBC) || defined(__onyx__)
 # include <__support/musl/xlocale.h>
 #endif
 
diff -Naur llvm-project-13.0.0/libcxx/src/include/config_elast.h llvm-project-13.0.0-patched/libcxx/src/include/config_elast.h
--- llvm-project-13.0.0/libcxx/src/include/config_elast.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/libcxx/src/include/config_elast.h	2022-02-03 15:24:18.505146043 +0000
@@ -29,7 +29,7 @@
 // No _LIBCPP_ELAST needed on Fuchsia
 #elif defined(__wasi__)
 // No _LIBCPP_ELAST needed on WASI
-#elif defined(__linux__) || defined(_LIBCPP_HAS_MUSL_LIBC)
+#elif defined(__linux__) || defined(_LIBCPP_HAS_MUSL_LIBC) || defined(__onyx__)
 #define _LIBCPP_ELAST 4095
 #elif defined(__APPLE__)
 // No _LIBCPP_ELAST needed on Apple
diff -Naur llvm-project-13.0.0/llvm/include/llvm/ADT/Triple.h llvm-project-13.0.0-patched/llvm/include/llvm/ADT/Triple.h
--- llvm-project-13.0.0/llvm/include/llvm/ADT/Triple.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/llvm/include/llvm/ADT/Triple.h	2022-02-03 15:24:18.508479426 +0000
@@ -170,6 +170,7 @@
     DragonFly,
     FreeBSD,
     Fuchsia,
+    Onyx,
     IOS,
     KFreeBSD,
     Linux,
@@ -515,6 +516,10 @@
     return getOS() == Triple::Fuchsia;
   }
 
+  bool isOSOnyx() const {
+    return getOS() == Triple::Onyx;
+  }
+
   bool isOSDragonFly() const { return getOS() == Triple::DragonFly; }
 
   bool isOSSolaris() const {
diff -Naur llvm-project-13.0.0/llvm/lib/CodeGen/TargetLoweringBase.cpp llvm-project-13.0.0-patched/llvm/lib/CodeGen/TargetLoweringBase.cpp
--- llvm-project-13.0.0/llvm/lib/CodeGen/TargetLoweringBase.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/llvm/lib/CodeGen/TargetLoweringBase.cpp	2022-02-03 15:24:18.508479426 +0000
@@ -192,7 +192,7 @@
     setLibcallName(RTLIB::FPROUND_F32_F16, "__gnu_f2h_ieee");
   }
 
-  if (TT.isGNUEnvironment() || TT.isOSFuchsia() ||
+  if (TT.isGNUEnvironment() || TT.isOSFuchsia() || TT.isOSOnyx() ||
       (TT.isAndroid() && !TT.isAndroidVersionLT(9))) {
     setLibcallName(RTLIB::SINCOS_F32, "sincosf");
     setLibcallName(RTLIB::SINCOS_F64, "sincos");
diff -Naur llvm-project-13.0.0/llvm/lib/Support/Triple.cpp llvm-project-13.0.0-patched/llvm/lib/Support/Triple.cpp
--- llvm-project-13.0.0/llvm/lib/Support/Triple.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/llvm/lib/Support/Triple.cpp	2022-02-03 15:24:18.508479426 +0000
@@ -201,6 +201,7 @@
   case Emscripten: return "emscripten";
   case FreeBSD: return "freebsd";
   case Fuchsia: return "fuchsia";
+  case Onyx: return "onyx";
   case Haiku: return "haiku";
   case HermitCore: return "hermit";
   case Hurd: return "hurd";
@@ -508,6 +509,7 @@
     .StartsWith("dragonfly", Triple::DragonFly)
     .StartsWith("freebsd", Triple::FreeBSD)
     .StartsWith("fuchsia", Triple::Fuchsia)
+    .StartsWith("onyx", Triple::Onyx)
     .StartsWith("ios", Triple::IOS)
     .StartsWith("kfreebsd", Triple::KFreeBSD)
     .StartsWith("linux", Triple::Linux)
diff -Naur llvm-project-13.0.0/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp llvm-project-13.0.0-patched/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp
--- llvm-project-13.0.0/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp	2022-02-03 15:24:18.511812809 +0000
@@ -1632,7 +1632,7 @@
     if (C->getSExtValue() == 0 && AM.Segment.getNode() == nullptr &&
         !IndirectTlsSegRefs &&
         (Subtarget->isTargetGlibc() || Subtarget->isTargetAndroid() ||
-         Subtarget->isTargetFuchsia())) {
+         Subtarget->isTargetFuchsia() || Subtarget->isTargetOnyx())) {
       if (Subtarget->isTarget64BitILP32() && !AllowSegmentRegForX32)
         return true;
       switch (N->getPointerInfo().getAddrSpace()) {
diff -Naur llvm-project-13.0.0/llvm/lib/Target/X86/X86ISelLowering.cpp llvm-project-13.0.0-patched/llvm/lib/Target/X86/X86ISelLowering.cpp
--- llvm-project-13.0.0/llvm/lib/Target/X86/X86ISelLowering.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/llvm/lib/Target/X86/X86ISelLowering.cpp	2022-02-03 15:24:18.528479724 +0000
@@ -2492,7 +2492,7 @@
 }
 
 static bool hasStackGuardSlotTLS(const Triple &TargetTriple) {
-  return TargetTriple.isOSGlibc() || TargetTriple.isOSFuchsia() ||
+  return TargetTriple.isOSGlibc() || TargetTriple.isOSFuchsia() || TargetTriple.isOSOnyx() ||
          (TargetTriple.isAndroid() && !TargetTriple.isAndroidVersionLT(17));
 }
 
@@ -2504,7 +2504,7 @@
 }
 
 Value *X86TargetLowering::getIRStackGuard(IRBuilderBase &IRB) const {
-  // glibc, bionic, and Fuchsia have a special slot for the stack guard in
+  // glibc, bionic, Onyx and Fuchsia have a special slot for the stack guard in
   // tcbhead_t; use it instead of the usual global variable (see
   // sysdeps/{i386,x86_64}/nptl/tls.h)
   if (hasStackGuardSlotTLS(Subtarget.getTargetTriple())) {
@@ -2554,7 +2554,7 @@
 
   StringRef GuardMode = M.getStackProtectorGuard();
 
-  // glibc, bionic, and Fuchsia have a special slot for the stack guard.
+  // glibc, bionic, Onyx and Fuchsia have a special slot for the stack guard.
   if ((GuardMode == "tls" || GuardMode.empty()) &&
       hasStackGuardSlotTLS(Subtarget.getTargetTriple()))
     return;
diff -Naur llvm-project-13.0.0/llvm/lib/Target/X86/X86Subtarget.h llvm-project-13.0.0-patched/llvm/lib/Target/X86/X86Subtarget.h
--- llvm-project-13.0.0/llvm/lib/Target/X86/X86Subtarget.h	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/llvm/lib/Target/X86/X86Subtarget.h	2022-02-03 15:24:18.528479724 +0000
@@ -849,6 +849,7 @@
   bool isTargetNaCl64() const { return isTargetNaCl() && is64Bit(); }
   bool isTargetMCU() const { return TargetTriple.isOSIAMCU(); }
   bool isTargetFuchsia() const { return TargetTriple.isOSFuchsia(); }
+  bool isTargetOnyx() const { return TargetTriple.isOSOnyx(); }
 
   bool isTargetWindowsMSVC() const {
     return TargetTriple.isWindowsMSVCEnvironment();
diff -Naur llvm-project-13.0.0/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp llvm-project-13.0.0-patched/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp
--- llvm-project-13.0.0/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp	2021-09-24 17:18:10.000000000 +0100
+++ llvm-project-13.0.0-patched/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp	2022-02-03 15:24:18.531813107 +0000
@@ -462,6 +462,7 @@
   bool IsRISCV64 = TargetTriple.getArch() == Triple::riscv64;
   bool IsWindows = TargetTriple.isOSWindows();
   bool IsFuchsia = TargetTriple.isOSFuchsia();
+  bool IsOnyx = TargetTriple.isOSOnyx();
   bool IsEmscripten = TargetTriple.isOSEmscripten();
   bool IsAMDGPU = TargetTriple.isAMDGPU();
 
@@ -510,7 +511,7 @@
         Mapping.Offset = kNetBSD_ShadowOffset64;
     } else if (IsPS4CPU)
       Mapping.Offset = kPS4CPU_ShadowOffset64;
-    else if (IsLinux && IsX86_64) {
+    else if ((IsLinux || IsOnyx) && IsX86_64) {
       if (IsKasan)
         Mapping.Offset = kLinuxKasan_ShadowOffset64;
       else
